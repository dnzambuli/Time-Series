new_data
b = c(sum(new_data$y), sum(new_data$x_y), sum(new_data$x_2_y))
val_1 = sum(new_data$x)
val_2 = sum(new_data$x_sqrd)
val_3 = sum(new_data$x_cubed)
val_4 =  sum(new_data$x_quad)
a = matrix(c(10, val_1, val_2,
val_1, val_2, val_3,
val_2, val_3, val_4), byrow = TRUE, nrow = 3)
a
coef_x = solve(a, b)
coef_x
cat("The corrected GDP using math formula is:\n\t ", coef_x[1] + (2022 - med_yr) * coef_x[2] + (2022 - med_yr)^2 * coef_x[3])
task_data$math_quad = coef_x[1] + task_data$zero_yr * coef_x[2] + task_data$zero_yr^2 * coef_x[3]
task_data
library(ggplot2)
ggplot(aes(x = year), data = task_data)+
geom_line(aes(y = GDP, color = "original"))+
geom_line(aes(y = reg_smooth, color = "reg_smooth"))+
geom_line(aes(y = quad_smth, color = "quad_smth"))+
labs(
title = "GDP to Year Data",
x = "year",
y = "GDP"
)+
scale_color_manual(name = "Legend", values = c("original" = "black", "reg_smooth"= "red", "quad_smth"= "blue"))+
theme_minimal()
exp_data = data.frame(year= seq(2014, 2021),
subscribers = c(2, 5, 11, 20, 35, 50, 70, 95))
exp_data
exp_Data = function(df,x, y){
# transform
log_data = log(df[[y]])
yr = df[[x]]
# fit
model = lm(log_data~yr, data = df )
print(paste("model summary:\n", summary(model)))
# intercepts
alpha = exp(coef(model)[1])
beta = coef(model)[2]
cat("The alpha value is and the beta value is:\n\t", alpha, "\t", beta,"\n")
val = df[[x]]
predicted = alpha * exp(beta * val)
return(predicted)
}
exp_data$t = exp_data$year - median(exp_data$year)
exp_data$exp_trend = exp_Data(exp_data, "t", "subscribers")
exp_data
exp_data$forecst_err = exp_data$subscribers - exp_data$exp_trend
exp_data
predict = function(alpha, beta, target){
return(alpha * exp(beta * target))
}
pred_subs = function(alpha, beta, target){
return(alpha * exp(beta * target))
}
med = median(exp_data$year)
target = 2024 - med
cat("The predicted subsribers are:\n\t",pred_subs(20.00024, 0.5395523, target), "\n")
med = median(exp_data$year)
target = 2024 - med
cat("The predicted subsribers are:\n\t",round(pred_subs(20.00024, 0.5395523, target)), "\n")
install.packages("writexlsx")
install.packages("writexl")
knitr::opts_chunk$set(echo = TRUE)
options(scipen = 999)
library(readr)
data_1 = read_csv("Iran Twitter NodeXL SNA UTC 1.csv")
head(data_1)
problems(data_1)
spec(data_1)
na_counts = colSums(is.na(data_1))
rem_cols = which(na_counts < nrow(data_1))
data_1 = data_1[, rem_cols]
head(data_1)
data_2 = read_csv("Iran Twitter NodeXL SNA UTC 2.csv")
na_counts_2 = colSums(is.na(data_2))
rem_cols_2 = which(na_counts_2 < nrow(data_2))
data_2 = data_2[, rem_cols_2]
head(data_1)
colnames(data_2)
str(data_1)
feature_data_1 = c('Tweet', 'Retweet Count', 'Favorite Count', 'Reply Count','Quote Count', 'Impression Count', 'Hashtags in Tweet', 'URLs in Tweet','Domains in Tweet', 'Mentions in Tweet', 'Media in Tweet', 'Language','Possibly Sensitive', 'Author ID')
key_data_1 = data_1[, feature_data_1]
head(key_data_1)
important_attributes_2 = c('Tooltip', 'Tweets', 'User ID', 'Verified', 'Followers', 'Followed', 'Description', 'Location','Favourites Count', 'Possibly Sensitive', 'Is Blue Verified', 'Can DM', "Tweeted Search Term?"
)
key_data_2 = data_2[,important_attributes_2]
head(key_data_2)
library(randomForest)
library(caret)
set.seed(124)
key_data_2$Verified = as.factor(key_data_2$Verified)
key_data_2$`Is Blue Verified` = as.factor(key_data_2$`Is Blue Verified`)
key_data_2$`Possibly Sensitive` = as.factor(key_data_2$`Is Blue Verified`)
key_data_2$`Can DM` = as.factor(key_data_2$`Can DM`)
key_data_2$`Tweeted Search Term?` = as.factor(key_data_2$`Tweeted Search Term?`)
key_data_2$`Favourites Count` = as.numeric(key_data_2$`Favourites Count`)
indexes = sample(nrow(key_data_2), floor(0.7 * nrow(key_data_2)))
train_data = key_data_2[indexes, ]
test_data = key_data_2[-indexes, ]
nrow(test_data)
nrow(train_data)
# dropping na values in train data
train_data_2 = na.omit(train_data)
train_data_2 = train_data_2[, !(names(train_data_2) %in% c("Tooltip", "Tweets", "User ID", "Description", "Location"))]
snake_case = function(x){
output = gsub(" ", "_", x )
return(output)
}
names(train_data_2)[names(train_data_2) == "Favourites Count"] = snake_case("Favourites Count")
names(train_data_2)[names(train_data_2) == "Possibly Sensitive"] = snake_case("Possibly Sensitive")
names(train_data_2)[names(train_data_2) == "Is Blue Verified"] = snake_case("Is Blue Verified")
names(train_data_2)[names(train_data_2) == "Can DM"] = snake_case("Can DM")
names(train_data_2)[names(train_data_2) == "Tweeted Search Term?"] = snake_case("Tweeted Search Term?")
library(writexl)
write_xlsx("train_data.csv", train_data_2)
?write_xlsx
library(writexl)
write_xlsx(train_data_2, "train_data.csv")
write_xlsx(test_data, "test_data.csv")
knitr::opts_chunk$set(echo = TRUE)
options(scipen = 999)
library(writexl)
write_xlsx(train_data_2, "train_data.xlsx")
write_xlsx(test_data, "test_data.xlsx")
library(writexl)
write_csv(train_data_2, "train_data.csv")
library(openxlsx)
write_csv(train_data_2, "train_data.csv")
library(openxlsx)
write.csv(train_data_2, "train_data.csv")
write.csv(test_data, "test_data.csv")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
Patient_Data = read_excel("Patient Data.xlsx")
View(Patient_Data)
head(Patient_Data)
as.Date(as.numeric(Patient_Data$Date_Ended), format =  "%Y-%m-%d", origin ="1899-12-30")
setwd("C:/Users/ADMIN/Documents/SEM 2 2024/survival analysis/assignments/group task 1")
library(dplyr)
Patient_Data = Patient_Data %>%
mutate(Date_Ended = ifelse(Date_Ended == "Ongoing", "2024-06-04", Date_Ended))
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
Patient_Data = read_excel("Patient Data.xlsx")
View(Patient_Data)
head(Patient_Data)
as.Date(as.numeric(Patient_Data$Date_Ended), format =  "%Y-%m-%d", origin ="1899-12-30")
library(dplyr)
Patient_Data = Patient_Data %>%
mutate(Date_Ended = ifelse(Date_Ended == "Ongoing", "2024-06-04", Date_Ended))
Patient_Data = Patient_Data %>%
mutate(Date_Started = as.Date(Date_Started, format = "%Y-%m-%d"),
Date_Started = as.Date(Date_Started, format = "%Y-%m-%d"))
head(Patient_Data)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
Patient_Data = read_excel("Patient Data.xlsx")
View(Patient_Data)
head(Patient_Data)
as.Date(as.numeric(Patient_Data$Date_Ended), format =  "%Y-%m-%d", origin ="1899-12-30")
library(dplyr)
Patient_Data = Patient_Data %>%
mutate(Date_Ended = ifelse(Date_Ended == "Ongoing", "2024-06-04", Date_Ended))
Patient_Data = Patient_Data %>%
mutate(Date_Started = as.Date(Date_Started, format = "%Y-%m-%d"),
Date_Ended = as.Date(Date_Ended, format = "%Y-%m-%d", origin ="1899-12-30"))
head(Patient_Data)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
Patient_Data = read_excel("Patient Data.xlsx")
View(Patient_Data)
head(Patient_Data)
as.Date(as.numeric(Patient_Data$Date_Ended), format =  "%Y-%m-%d", origin ="1899-12-30")
any(is.na(Patient_Data$Date_Ended))
True && True
TRUE && TRUE
!is.na(NA)
library(dplyr)
Patient_Data = Patient_Data %>%
mutate(Date_Ended = ifelse(Date_Ended == "Ongoing", "2024-06-04", Date_Ended))
# convert the number date to actuall days
Patient_Data = Patient_Data %>%
mutate(Date_Ended = ifelse(Date_Ended != "2024-06-04" && !is.na(Date_Ended), as.Date(Date_Ended, format = "%Y-%m-%d", origin ="1899-12-30"), Date_Ended))
as.numeric(NA)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
Patient_Data = read_excel("Patient Data.xlsx")
View(Patient_Data)
head(Patient_Data)
as.Date(as.numeric(Patient_Data$Date_Ended), format =  "%Y-%m-%d", origin ="1899-12-30")
library(dplyr)
# Convert the date data with ongoing to "2024-06-04"
# convert all the data to numeric
# convert the numbers to dates
# format to standard date format
Patient_Data = Patient_Data %>%
mutate(Date_Ended = ifelse(Date_Ended == "Ongoing", "2024-06-04", Date_Ended),
Date_Ended_num = suppressWarnings(as.numeric(Date_Ended)),
Date_Ended = ifelse(!is.na(Date_Ended_num), as.Date(Date_Ended_num, origin = "1899-12-30"), Date_Ended),
Date_Ended = as.Date(Date_Ended, format = "%Y-%m-%d"))
Patient_Data = Patient_Data %>%
mutate(Date_Started = as.Date(Date_Started, format = "%Y-%m-%d"))
head(Patient_Data)
as.numeric("2024-06-04")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
Patient_Data = read_excel("Patient Data.xlsx")
View(Patient_Data)
head(Patient_Data)
as.Date(as.numeric(Patient_Data$Date_Ended), format =  "%Y-%m-%d", origin ="1899-12-30")
library(dplyr)
# Convert the date data with ongoing to "2024-06-04"
# convert all the data to numeric
# convert the numbers to dates
# format to standard date format
Patient_Data = Patient_Data %>%
mutate(Date_Ended = ifelse(Date_Ended == "Ongoing", "2024-06-04", Date_Ended),
#Date_Ended_num = suppressWarnings(as.numeric(Date_Ended)),
Date_Ended = ifelse(!is.na(Date_Ended_num), as.Date(Date_Ended_num, origin = "1899-12-30"), Date_Ended),
Date_Ended = as.Date(Date_Ended, format = "%Y-%m-%d"))
ifelse(Patient_Data$Date_Ended != "2024-06-04"ifelse(!is.na(Date_Ended), as.Date(Date_Ended, origin = "1899-12-30"), Date_Ended))
ifelse(Patient_Data$Date_Ended != "2024-06-04" && !is.na(Date_Ended), as.Date(Date_Ended, origin = "1899-12-30"), Date_Ended)
ifelse(Patient_Data$Date_Ended != "2024-06-04" && !is.na(Patient_Data$Date_Ended), as.Date(Patient_Data$Date_Ended, origin = "1899-12-30"), Patient_Data$Date_Ended)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
Patient_Data = read_excel("Patient Data.xlsx")
View(Patient_Data)
head(Patient_Data)
as.Date(as.numeric(Patient_Data$Date_Ended), format =  "%Y-%m-%d", origin ="1899-12-30")
ifelse(Patient_Data$Date_Ended != "2024-06-04" && !is.na(Patient_Data$Date_Ended), as.Date(Patient_Data$Date_Ended, origin = "1899-12-30"), Patient_Data$Date_Ended)
a = ifelse(Patient_Data$Date_Ended != "2024-06-04" && !is.na(Patient_Data$Date_Ended), as.Date(Patient_Data$Date_Ended, origin = "1899-12-30"), Patient_Data$Date_Ended)c
a = ifelse(Patient_Data$Date_Ended != "2024-06-04" && !is.na(Patient_Data$Date_Ended), as.Date(Patient_Data$Date_Ended, origin = "1899-12-30"), Patient_Data$Date_Ended)
as.character(as.Date("2024-06-04"))
# format to standard date format
date_ended = as.character(as.date(Patient_Data$Date_Ended != "ongoing" &&  !is.na(Patient_Data$Date_Ended)))
# format to standard date format
date_ended = as.character(as.Date(Patient_Data$Date_Ended != "ongoing" &&  !is.na(Patient_Data$Date_Ended)))
?lapply
lapply(Patient_Data$Date_Ended, as.character(as.Date))
Patient_Data$Date_Ended
library(dplyr)
# Convert the date data with ongoing to "2024-06-04"
# convert all the data to numeric
# convert the numbers to dates
# format to standard date format
Patient_Data = Patient_Data %>%
mutate(Date_Ended = ifelse(Date_Ended == "Ongoing", "2024-06-04", Date_Ended),
Date_Ended = ifelse(!is.na(as.numeric(Date_Ended)), as.Date(as.numeric(Date_Ended), origin = "1899-12-30"), Date_Ended),
Date_Ended = as.Date(Date_Ended, format = "%Y-%m-%d"))
Patient_Data = Patient_Data %>%
mutate(Date_Started = as.Date(Date_Started, format = "%Y-%m-%d"))
head(Patient_Data)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
Patient_Data = read_excel("Patient Data.xlsx")
View(Patient_Data)
head(Patient_Data)
as.Date(as.numeric(Patient_Data$Date_Ended), format =  "%Y-%m-%d", origin ="1899-12-30")
library(dplyr)
# Convert the date data with ongoing to "2024-06-04"
# convert all the data to numeric
# convert the numbers to dates
# format to standard date format
clean_Data = Patient_Data %>%
mutate(Date_Ended = ifelse(Date_Ended == "Ongoing", "2024-06-04", Date_Ended),
Date_Ended = ifelse(!is.na(as.numeric(Date_Ended)), as.Date(as.numeric(Date_Ended), origin = "1899-12-30"), Date_Ended),
Date_Ended = as.Date(Date_Ended, format = "%Y-%m-%d"))
clean_Data = clean_Data %>%
mutate(Date_Started = as.Date(Date_Started, format = "%Y-%m-%d"))
head(clean_Data)
View(clean_Data)
!is.na(as.numeric(NA))
!is.na(as.numeric( "2024-06-04"))
as.Date( "2024-06-04")
as.Date(NA)
as.Date("45410")
as.Date(as.numeric("45410"))
as.Date(as.numeric("2022-12-06"))
as.numeric(as.Date("2022-12-06"))
as.numeric(as.Date(NA))
library(dplyr)
# Convert the date data with ongoing to "2024-06-04"
# convert all the data to numeric
# convert the numbers to dates
# format to standard date format
clean_Data = Patient_Data %>%
mutate(Date_Ended = ifelse(Date_Ended == "Ongoing", "2024-06-04", Date_Ended),
Date_Ended = ifelse(!is.na(as.numeric(as.Date(Date_Ended))), as.Date(Date_Ended, origin = "1899-12-30"), Date_Ended),
Date_Ended = as.Date(Date_Ended, format = "%Y-%m-%d"))
clean_Data = clean_Data %>%
mutate(Date_Started = as.Date(Date_Started, format = "%Y-%m-%d"))
head(clean_Data)
Date_Ended = ifelse(Patient_Data$Date_Ended == "Ongoing", "2024-06-04",ifelse(!is.na(as.numeric(as.Date(Patient_Data$Date_Ended))), as.Date(Patient_Data$Date_Ended, origin = "1899-12-30"), Patient_Data$Date_Ended))
date = Patient_Data$Date_Ended
date[!is.na(date)] = as.Date(!is.na(date))
date[!is.na(date)]
date[date == "Ongoing"] = "2024-06-04"
date[!is.na(date)]
date[!is.na(date) && date != "2024-06-04"]
date[!is.na(date)][!= "2024-06-04"]
date[!is.na(date)][date[!is.na(date)]!= "2024-06-04"]
date[!is.na(date)][date[!is.na(date)]!= "2024-06-04"] = as.Date(date[!is.na(date)][date[!is.na(date)]!= "2024-06-04"], origin = "1899-12-30")
as.Date(as.numeric("04/12/923"))
2024 - 923
Patient_Data$Date_Ended[Patient_Data$Date_Ended == "04/12/923"] = NA
library(dplyr)
# there is a challenge with casting in dplyr a step by step process is the best option
date = Patient_Data$Date_Ended
# Convert the date data with ongoing to "2024-06-04"
date[date == "Ongoing"] = "2024-06-04"
# convert all the data to numeric
# convert the numbers to dates
date[!is.na(date)][date[!is.na(date)]!= "2024-06-04"] = as.Date(as.numeric(date[!is.na(date)][date[!is.na(date)]!= "2024-06-04"]))
# format to standard date format
date
# convert all the data to numeric
# convert the numbers to dates
date[!is.na(date)][date[!is.na(date)]!= "2024-06-04"] = as.Date(as.numeric(date[!is.na(date)][date[!is.na(date)]!= "2024-06-04"]), origin = "1899-12-30")
# format to standard date format
date
date = Patient_Data$Date_Ended
# Convert the date data with ongoing to "2024-06-04"
date[date == "Ongoing"] = "2024-06-04"
# convert all the data to numeric
# convert the numbers to dates
date[!is.na(date)][date[!is.na(date)]!= "2024-06-04"] = as.Date(as.numeric(date[!is.na(date)][date[!is.na(date)]!= "2024-06-04"]), origin = "1899-12-30")
# format to standard date format
date
# convert all the data to numeric
# convert the numbers to dates
date[!is.na(date)][date[!is.na(date)]!= "2024-06-04"] = as.Date(as.numeric(date[!is.na(date)][date[!is.na(date)]!= "2024-06-04"]), origin = "1899-12-30", format = "%Y-%m-%d")
# format to standard date format
date
date = Patient_Data$Date_Ended
# Convert the date data with ongoing to "2024-06-04"
date[date == "Ongoing"] = "2024-06-04"
# convert all the data to numeric
# convert the numbers to dates
date[!is.na(date)][date[!is.na(date)]!= "2024-06-04"] = as.Date(as.numeric(date[!is.na(date)][date[!is.na(date)]!= "2024-06-04"]), origin = "1899-12-30", format = "%Y-%m-%d")
# format to standard date format
date
date = Patient_Data$Date_Ended
# format to standard date format
date
# Convert the date data with ongoing to "2024-06-04"
date[date == "Ongoing"] = "2024-06-04"
# format to standard date format
date
# convert all the data to numeric
# convert the numbers to dates
date = ifelse(!is.na(date) & date != "2024-06-04",
as.Date(as.numeric(date), origin = "1899-12-30"),
date)
# format to standard date format
date
as.Date(as.numeric("19844")
)\
as.Date(as.numeric("19844"))
library(dplyr)
# there is a challenge with casting in dplyr a step by step process is the best option
date = Patient_Data$Date_Ended
# Convert the date data with ongoing to "2024-06-04"
date[date == "Ongoing"] = "2024-06-04"
# convert all the data to numeric
# convert the numbers to dates
date = ifelse(!is.na(date) & date != "2024-06-04",
as.Date(as.numeric(as.Date(as.numeric(date), origin = "1899-12-30"))),
date)
# format to standard date format
date
library(dplyr)
# there is a challenge with casting in dplyr a step by step process is the best option
date = Patient_Data$Date_Ended
# Convert the date data with ongoing to "2024-06-04"
date[date == "Ongoing"] = "2024-06-04"
# convert all the data to numeric
# convert the numbers to dates
date = ifelse(!is.na(date) & date != "2024-06-04",
as.Date(as.numeric(date), origin = "1899-12-30"),
date)
# format to standard date format
date
ifelse(!is.na(date) & date != "2024-06-04",
as.Date(as.numeric(date), origin = "1899-12-30"),
date)
date = Patient_Data$Date_Ended
"
""
"
# Convert the date data with ongoing to "2024-06-04"
date[date == "Ongoing"] = "2024-06-04"
date
date[!is.na(date) & date != "2024-06-04"]
as.Date(date[!is.na(date) & date != "2024-06-04"])
as.Date(as.numeric(date[!is.na(date) & date != "2024-06-04"]))
as.Date(as.numeric(date[!is.na(date) & date != "2024-06-04"]), origin = "1899-12-30")
library(dplyr)
# there is a challenge with casting in dplyr a step by step process is the best option
date = Patient_Data$Date_Ended
# Convert the date data with ongoing to "2024-06-04"
date[date == "Ongoing"] = "2024-06-04"
# convert all the data to numeric
# convert the numbers to dates
date[!is.na(date) & date != "2024-06-04"] = as.Date(as.numeric(date[!is.na(date) & date != "2024-06-04"]), origin = "1899-12-30")
# format to standard date format
date
date = Patient_Data$Date_Ended
# Convert the date data with ongoing to "2024-06-04"
date[date == "Ongoing"] = "2024-06-04"
# convert all the data to numeric
# convert the numbers to dates
date_b = date[!is.na(date) & date != "2024-06-04"]
date_b
as.Date(as.numeric(date_b), origin = "1899-12-30")
date[!is.na(date) & date != "2024-06-04"] = as.Date(as.numeric(date_b), origin = "1899-12-30")
# format to standard date format
date
as.Date(date)
date = Patient_Data$Date_Ended
# Convert the date data with ongoing to "2024-06-04"
date[date == "Ongoing"] = "2024-06-04"
as.character(as.Date(as.numeric(date_b), origin = "1899-12-30"))
# convert all the data to numeric
# convert the numbers to dates
date_b = date[!is.na(date) & date != "2024-06-04"]
date[!is.na(date) & date != "2024-06-04"] = as.character(as.Date(as.numeric(date_b), origin = "1899-12-30"))
# format to standard date format
date
clean_Data = Patient_Data
clean_Data$Date_Ended = date
clean_Data = clean_Data %>%
mutate(Date_Started = as.Date(Date_Started, format = "%Y-%m-%d"),
Date_Ended = as.Date(Date_Ended, format = "%Y-%m-%d"))
head(clean_Data)
library(survival)
library(survminer)
install.packages(survminer)
install.packages("survminer")
library(survival)
library(survminer)
surv_Data = data.frame(duration = as.numeric(clean_Data$Date_Ended - clean_Data$Date_Started),
event_observed = ifelse(!is.na(clean_Data$Date_Ended) & clean_Data$Date_Ended != "2024-06-04", 1, 0))
head(surv_Data)
surv_obj = Surv(time = surv_Data$duration, event = surv_Data$event_observed)
km_fit = survfit(surv_obj~1, data = clean_Data)
summary(km_fit)
ggsurvplot(km_fit, data = patient_data,
xlab = "Days",
ylab = "Survival Probability",
title = "Kaplan-Meier Survival Curve")
ggsurvplot(km_fit, data = clean_Data,
xlab = "Days",
ylab = "Survival Probability",
title = "Kaplan-Meier Survival Curve")
haz_fit = coxph(surv_obj~1, data = clean_Data)
# baseline hazard function
base_haz = basehaz(haz_fit, centered = F)
summary(haz_fit)
ggplot(base_haz, aes(x = time, y = hazard))+
geom_line()+
labs(x = "Days",
y = "Hazard",
title = "Baseline Hazard Function")
setwd("C:/Users/ADMIN/Documents/SEM 2 2024/STA3050 time series/Tasks_and_Assignments/subtask 2")
knitr::opts_chunk$set(echo = TRUE)
sales_data = data.frame(year = seq(2018, 2020),
Q1 = c(48, 58,60),
Q2 = c(41, 52, 56),
Q3 = c(60, 68, 75))
sales_data
library(tidyr)
sales_long = pivot_longer(sales_data, cols = starts_with("Q"), names_to = "Quarter", values_to = "Sales")
sales_long
sales_data = data.frame(year = seq(2018, 2020),
Q1 = c(48, 58,60),
Q2 = c(41, 52, 56),
Q3 = c(60, 68, 75),
Q4 = c(65, 74, 78))
sales_data
library(tidyr)
sales_long = pivot_longer(sales_data, cols = starts_with("Q"), names_to = "Quarter", values_to = "Sales")
sales_long
install.packages("zoo")
library(zoo)
sales_long$mov_avg = rollmean(sales_long$Sales, k = 4, fill = NA,align = "right")
sales_long
1/4 *(48 + 41+ 60+65)
sales_long$cMA = rollmean(sales_long$mov_avg, k = 2, fill = NA, align = 'center')
sales_long
View(sales_long)
sales_long$trend_val = sales_long$Sales/sales_long$cMA
sales_long
60/54.75
sales_long$cMA
cma_first_na = which(is.na(sales_long$cMA))[1]
cma = sales_long$cMA[-cma_first_na]
cma = c(cma, NA)
cma
cma_first_na = which(is.na(sales_long$cMA))[1]
cma = sales_long$cMA[-cma_first_na]
cma = c(cma, NA)
cma
sales_long$cMA = cma
sales_long$trend_val = sales_long$Sales/sales_long$cMA
sales_long
smooth = data.frame(year = sales_long$year,
quarter = sales_long$Quarter,
sales = sales_long$trend_val)
smooth
head(smooth)
