tourists = month_data$No_of_tourists,
adj_seas_ind = rep(month_wide$seas_ind, 5))
monthly_smoothed_data$deseason = monthly_smoothed_data$tourists/ monthly_smoothed_data$adj_seas_ind * 100
monthly_smoothed_data
quarter_smoothed_data = data.frame(quarter = rep(seas_wide$Season, 5),
year = rep(seq(2019, 2023), 4),
adj_seas_ind = rep(seas_wide$seas_ind, 5))
quarter_smoothed_data = quarter_smoothed_data[order(quarter_smoothed_data$year),]
quarter_smoothed_data$tourist = seasonal_data$No_of_tourists
quarter_smoothed_data$deseasoned = quarter_smoothed_data$tourist/quarter_smoothed_data$adj_seas_ind * 100
rownames(quarter_smoothed_data) = NULL
quarter_smoothed_data
nrow(monthly_smoothed_data)
monthly_smoothed_data$t = seq(1:nrow(monthly_smoothed_data))
med_month_t = median(monthly_smoothed_data$t)
monthly_smoothed_data$x_t = 2*(monthly_smoothed_data$t - med_month_t)
monthly_smoothed_data
sum(monthly_smoothed_data$x_t)
monthly_smoothed_data$XY = monthly_smoothed_data$deseason * monthly_smoothed_data$x_t
monthly_smoothed_data$x_sqrd = monthly_smoothed_data$x_t^2
monthly_smoothed_data
summary(lm(deseason~x_t, data = monthly_smoothed_data))
summary(lm(deseason~poly(x_t, 2, raw = T), data = monthly_smoothed_data))
summary(lm(deseason~x_t + x_sqrd, data = monthly_smoothed_data))
quadratic_model = lm(deseason~poly(x_t, 2, raw = T), data = monthly_smoothed_data)
linear_model = lm(deseason~x_t, data = monthly_smoothed_data)
linear_residual_R = summary(linear_model)$sigma
quadrat_residual_R = summary(quadratic_model)$sigma
if (linear_residual_R < quadrat_residual_R){
print("Linear Model is the best model")
}else if(linear_residual_R == quadrat_residual_R){
print("any model can be used")
}else{
print("Quadratic Model is the best model")
}
coeff_monthly = coef(quadratic_model)
coeff_monthly
monthly_b0 = coeff_monthly[1]
monthly_b1 = coeff_monthly[2]
monthly_b2 = coeff_monthly[3]
monthly_smoothed_data$trend = monthly_b0 + (monthly_b1 * monthly_smoothed_data$x) + (monthly_b2 * monthly_smoothed_data$x_sqrd)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
Mid_sem_dataset = read_excel("Mid-sem dataset.xlsx")
Mid_sem_dataset
seasonal_data = Mid_sem_dataset[, c(1, 3, 4)]
seasonal_data
library(tidyverse)
seasonal_data = seasonal_data %>% group_by(Year, Season) %>% summarise(No_of_tourists = sum(No_of_tourists))
seasonal_data
seasonal_data$Season = factor(seasonal_data$Season, levels = c("Summer", "Autumn", "Winter", "Spring"))
seasonal_data = seasonal_data[order(seasonal_data$Year, seasonal_data$Season),]
seasonal_data
mov_avg = zoo::rollmean(seasonal_data$No_of_tourists, k = 4, fill = NA, align = "center")
mov_avg
seasonal_data$mov_avg = mov_avg
seasonal_data
rat_mn = zoo::rollmean(seasonal_data$mov_avg, k = 2, fill = NA, align = "center")
rat_mn = c(NA, rat_mn[1:19])
rat_mn
seasonal_data$rat_mn = rat_mn
seasonal_data
seasonal_data$sn_rel = seasonal_data$No_of_tourists/ seasonal_data$rat_mn * 100
seasonal_data
seas_wide = pivot_wider(seasonal_data[, c(1, 2, 6)], names_from = Year, values_from = sn_rel)
seas_wide
seas_wide$median = apply(seas_wide[,2:6], 1, function(x) median(x, na.rm = T))
seas_wide
tot_seas_median = mean(seas_wide$median)
seas_wide$seas_ind = seas_wide$median / tot_seas_median * 100
seas_wide
present_month = function(data, x, season_size){
mov_avg = zoo::rollmean(data[[x]], k = season_size, fill = NA, align = "center")
print("The moving average is:")
print(mov_avg)
rat_mn = zoo::rollmean(mov_avg, k = 2, fill = NA, align = "center")
rat_mn = c(NA, rat_mn[1:(length(rat_mn) -1)])
print("The centralized moving average is:")
print(rat_mn)
sn_rel = seasonal_data$No_of_tourists/ rat_mn * 100
print("The seasonal relative is:")
print(sn_rel)
long = data.frame(Year = data[,2],
Season = data[, 1],
sn_rel = sn_rel)
wide = pivot_wider(long, names_from = Year, values_from = sn_rel)
print("The data in wide format is:")
print(wide)
wide$median = apply(wide[,2:ncol(wide)], 1, function(x) median(x, na.rm = T))
tot_seas_median = mean(wide$median)
wide$seas_ind = wide$median / tot_seas_median * 100
print("With seasonal index")
return(wide)
}
month_data = Mid_sem_dataset[, c(2, 3, 4)]
colnames(month_data)
month_wide = present_month(month_data,"No_of_tourists", 12)
month_wide
monthly_smoothed_data = data.frame(month = rep(month_wide$Month, 5),
year = rep(seq(2019, 2023), 12),
tourists = month_data$No_of_tourists,
adj_seas_ind = rep(month_wide$seas_ind, 5))
monthly_smoothed_data$deseason = monthly_smoothed_data$tourists/ monthly_smoothed_data$adj_seas_ind * 100
monthly_smoothed_data
quarter_smoothed_data = data.frame(quarter = rep(seas_wide$Season, 5),
year = rep(seq(2019, 2023), 4),
adj_seas_ind = rep(seas_wide$seas_ind, 5))
quarter_smoothed_data = quarter_smoothed_data[order(quarter_smoothed_data$year),]
quarter_smoothed_data$tourist = seasonal_data$No_of_tourists
quarter_smoothed_data$deseasoned = quarter_smoothed_data$tourist/quarter_smoothed_data$adj_seas_ind * 100
rownames(quarter_smoothed_data) = NULL
quarter_smoothed_data
nrow(monthly_smoothed_data)
monthly_smoothed_data$t = seq(1:nrow(monthly_smoothed_data))
med_month_t = median(monthly_smoothed_data$t)
monthly_smoothed_data$x_t = 2*(monthly_smoothed_data$t - med_month_t)
monthly_smoothed_data$t_sqrd = monthly_smoothed_data$t^2
monthly_smoothed_data
sum(monthly_smoothed_data$x_t)
monthly_smoothed_data$XY = monthly_smoothed_data$deseason * monthly_smoothed_data$x_t
monthly_smoothed_data$x_sqrd = monthly_smoothed_data$x_t^2
monthly_smoothed_data
summary(lm(deseason~x_t, data = monthly_smoothed_data))
summary(lm(deseason~poly(x_t, 2, raw = T), data = monthly_smoothed_data))
summary(lm(deseason~x_t + x_sqrd, data = monthly_smoothed_data))
quadratic_model = lm(deseason~poly(x_t, 2, raw = T), data = monthly_smoothed_data)
linear_model = lm(deseason~x_t, data = monthly_smoothed_data)
linear_residual_R = summary(linear_model)$sigma
quadrat_residual_R = summary(quadratic_model)$sigma
if (linear_residual_R < quadrat_residual_R){
print("Linear Model is the best model")
}else if(linear_residual_R == quadrat_residual_R){
print("any model can be used")
}else{
print("Quadratic Model is the best model")
}
coeff_monthly = coef(quadratic_model)
coeff_monthly
monthly_b0 = coeff_monthly[1]
monthly_b1 = coeff_monthly[2]
monthly_b2 = coeff_monthly[3]
monthly_smoothed_data$trend = monthly_b0 + (monthly_b1 * monthly_smoothed_data$t) + (monthly_b2 * monthly_smoothed_data$t_sqrd)
monthly_smoothed_data
quadratic_model_q = lm(deseasoned~poly(x, 2, raw = T), data = quarter_smoothed_data)
quarter_smoothed_data$t = seq(1, 20)
med_quarter = median(quarter_smoothed_data$t)
quarter_smoothed_data$x = 2 * (quarter_smoothed_data$t- med_quarter)
quadratic_model_q = lm(deseasoned~poly(x, 2, raw = T), data = quarter_smoothed_data)
linear_model_q = lm(deseasoned~x, data = quarter_smoothed_data)
linear_residual_R = summary(linear_model_q)$sigma
quadrat_residual_R = summary(quadratic_model_q)$sigma
if (linear_residual_R < quadrat_residual_R){
print("Linear Model is the best model")
}else if(linear_residual_R == quadrat_residual_R){
print("any model can be used")
}else{
print("Quadratic Model is the best model")
}
quarter_smoothed_data$XY = quarter_smoothed_data$deseasoned * quarter_smoothed_data$x
quarter_smoothed_data$x_sqrd = quarter_smoothed_data$x^2
quarter_smoothed_data$t_2 = quarter_smoothed_data$t^2
quarter_coeff = coef(quadratic_model_q)
quarter_b0 = quarter_coeff[1]
quarter_b0
quarter_b1 = quarter_coeff[2]
quarter_b1
quarter_b2 = quarter_coeff[3]
quarter_b2
quarter_smoothed_data$trend = quarter_b0 + (quarter_b1 * quarter_smoothed_data$t) + (quarter_b2 * quarter_smoothed_data$t_sqrd)
quarter_b0 = quarter_coeff[1][1]
quarter_b0
quarter_coeff
quarter_b0 = quarter_coeff[1][1]
quarter_b0
quarter_b1 = quarter_coeff[2][1]
quarter_b1
quarter_b2 = quarter_coeff[3][1]
quarter_b2
quarter_smoothed_data$trend = quarter_b0 + (quarter_b1 * quarter_smoothed_data$t) + (quarter_b2 * quarter_smoothed_data$t_sqrd)
quarter_b0 = quarter_coeff[1]
quarter_b0
colnames(quarter_coeff) = NULL
quarter_coeff
quarter_b0 = quarter_coeff[1]
quarter_b0
quarter_coeff = coef(quadratic_model_q)
quarter_smoothed_data$XY = quarter_smoothed_data$deseasoned * quarter_smoothed_data$x
quarter_smoothed_data$x_sqrd = quarter_smoothed_data$x^2
quarter_smoothed_data$t_sqrd = quarter_smoothed_data$t^2
quarter_coeff = coef(quadratic_model_q)
quarter_coeff
quarter_b0 = quarter_coeff[1]
quarter_b0
quarter_b1 = quarter_coeff[2]
quarter_b1
quarter_b2 = quarter_coeff[3]
quarter_b2
quarter_smoothed_data$trend = quarter_b0 + (quarter_b1 * quarter_smoothed_data$t) + (quarter_b2 * quarter_smoothed_data$t_sqrd)
quarter_smoothed_data
monthly_smoothed_data$cyclic = monthly_smoothed_data$deseason/ monthly_smoothed_data$trend * 100
monthly_smoothed_data
quarter_smoothed_data$cyclic = quarter_smoothed_data$deseason/ quarter_smoothed_data$trend * 100
quarter_smoothed_data
months = c(
"January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December"
)
monthly_smoothed_data$month = factor(monthly_smoothed_data$month, levels = months)
monthly_smoothed_data$season_year = paste(monthly_smoothed_data$month, monthly_smoothed_data$year)
monthly_smoothed_data$season_year = factor(monthly_smoothed_data$season_year, levels = unique(monthly_smoothed_data$season_year))
#
#
ggplot(monthly_smoothed_data, aes(x = season_year)) +
geom_line(aes(y = tourists, color = "original"), group = 1) +
# geom_line(aes(y = adj_seas_ind, color = "seasonal"), group = 1) +
geom_line(aes(y = deseason, color = "deseason"), group = 1, linetype = "dotted") +
geom_line(aes(y = trend, color = "trend"), group = 1) +
geom_line(aes(y = cyclic, color = "cyclic"), group = 1) +
labs(title = "Seasonal Index from Summer 2019 to Spring 2023",
x = "Time",
y = "Seasonal Index") +
theme_minimal() +
scale_color_manual(name = "Legend", values = c("original" = "black", "seasonal"= "red", "trend"= "blue", "cyclic" = "darkgreen", "deseason" = "purple"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
quarter_smoothed_data$date = as.Date(paste(quarter_smoothed_data$year, as.numeric(quarter_smoothed_data$quarter) * 3 - 2, "1", sep = "-"), format = "%Y-%m-%d")
quarter_smoothed_data$season_year = paste(quarter_smoothed_data$quarter, quarter_smoothed_data$year)
ggplot(quarter_smoothed_data, aes(x = date)) +
geom_line(aes(y = tourist, color = "original"), group = 1) +
geom_line(aes(y = deseasoned, color = "deseason"), group = 1, linetype = "dotted") +
geom_line(aes(y = trend, color = "trend"), group = 1) +
geom_line(aes(y = cyclic, color = "cyclic"), group = 1) +
labs(title = "Quarterly Seasonal Index from Summer 2019 to Spring 2023",
x = "Time",
y = "Seasonal Index") +
theme_minimal() +
scale_color_manual(name = "Legend", values = c("original" = "black", "trend"= "blue", "cyclic" = "darkgreen", "deseason" = "purple"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(Mid_sem_dataset)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=6)
summary(nls(deseason~a + exp(b * x_t), data = monthly_smoothed_data, start = list(a = 1, b = 0.1)))
quadratic_model = lm(deseason~poly(x_t, 2, raw = T), data = monthly_smoothed_data)
linear_model = lm(deseason~x_t, data = monthly_smoothed_data)
linear_residual_R = summary(linear_model)$sigma
quadrat_residual_R = summary(quadratic_model)$sigma
if (linear_residual_R < quadrat_residual_R){
print("Linear Model is the best model")
}else if(linear_residual_R == quadrat_residual_R){
print("any model can be used")
}else{
print("Quadratic Model is the best model")
}
exp_model = lm(deseason~x_t, data = monthly_smoothed_data)
exp_residual_R = summary(linear_model)$sigma
if (exp_residual_R < quadrat_residual_R){
print("Exponential Model is the best model")
}else if(linear_residual_R == quadrat_residual_R){
print("any model can be used; Exponential or Quadratic")
}else{
print("Quadratic Model is the best model")
}
exp_model = nls(deseason~a + exp(b * x_t), data = monthly_smoothed_data, start = list(a = 1, b = 0.1))
exp_residual_R = summary(linear_model)$sigma
if (exp_residual_R < quadrat_residual_R){
print("Exponential Model is the best model")
}else if(linear_residual_R == quadrat_residual_R){
print("any model can be used; Exponential or Quadratic")
}else{
print("Quadratic Model is the best model")
}
quadratic_model_q = lm(deseasoned~poly(x, 2, raw = T), data = quarter_smoothed_data)
linear_model_q = lm(deseasoned~x, data = quarter_smoothed_data)
linear_residual_R = summary(linear_model_q)$sigma
quadrat_residual_R = summary(quadratic_model_q)$sigma
if (linear_residual_R < quadrat_residual_R){
print("Linear Model is the best model")
}else if(linear_residual_R == quadrat_residual_R){
print("any model can be used")
}else{
print("Quadratic Model is the best model")
}
quadratic_model = lm(deseason~poly(x_t, 2, raw = T), data = monthly_smoothed_data)
linear_model = lm(deseason~x_t, data = monthly_smoothed_data)
linear_residual_R = summary(linear_model)$sigma
quadrat_residual_R = summary(quadratic_model)$sigma
if (linear_residual_R < quadrat_residual_R){
print("Linear Model is the best model")
}else if(linear_residual_R == quadrat_residual_R){
print("any model can be used")
}else{
print("Quadratic Model is the best model")
}
exp_model = nls(deseason~a + exp(b * x_t), data = monthly_smoothed_data, start = list(a = 1, b = 0.1))
exp_residual_R = summary(exp_model)$sigma
if (exp_residual_R < quadrat_residual_R){
print("Exponential Model is the best model")
}else if(linear_residual_R == quadrat_residual_R){
print("any model can be used; Exponential or Quadratic")
}else{
print("Quadratic Model is the best model")
}
quadratic_model_q = lm(deseasoned~poly(x, 2, raw = T), data = quarter_smoothed_data)
linear_model_q = lm(deseasoned~x, data = quarter_smoothed_data)
linear_residual_R = summary(linear_model_q)$sigma
quadrat_residual_R = summary(quadratic_model_q)$sigma
if (linear_residual_R < quadrat_residual_R){
print("Linear Model is the best model")
}else if(linear_residual_R == quadrat_residual_R){
print("any model can be used")
}else{
print("Quadratic Model is the best model")
}
exp_model_q = nls(deseasoned~a + exp(b * x), data = quarter_smoothed_data, start = list(a = 1, b = 0.1))
exp_model_q = nls(deseasoned~a + exp(b * x), data = quarter_smoothed_data, start = list(a = 1, b = 0.1))
exp_model_q = nls(deseasoned ~ a * exp(b * x), data = quarter_smoothed_data, start = list(a = 1, b = 0.1))
quarter_smoothed_data$log_deseason = log(quarter_smoothed_data$deseasoned)
exp_model_q = lm(log_deseason~x, data = quarter_smoothed_data)
exp_residual_R = summary(exp_model_q)$sigma
if (exp_residual_R < quadrat_residual_R){
print("Exponential Model is the best model")
}else if(linear_residual_R == quadrat_residual_R){
print("any model can be used; Exponential or Quadratic")
}else{
print("Quadratic Model is the best model")
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=6)
library(readxl)
Mid_sem_dataset = read_excel("Mid-sem dataset.xlsx")
Mid_sem_dataset
seasonal_data = Mid_sem_dataset[, c(1, 3, 4)]
seasonal_data
library(tidyverse)
seasonal_data = seasonal_data %>% group_by(Year, Season) %>% summarise(No_of_tourists = sum(No_of_tourists))
seasonal_data
seasonal_data$Season = factor(seasonal_data$Season, levels = c("Summer", "Autumn", "Winter", "Spring"))
seasonal_data = seasonal_data[order(seasonal_data$Year, seasonal_data$Season),]
seasonal_data
mov_avg = zoo::rollmean(seasonal_data$No_of_tourists, k = 4, fill = NA, align = "center")
mov_avg
seasonal_data$mov_avg = mov_avg
seasonal_data
rat_mn = zoo::rollmean(seasonal_data$mov_avg, k = 2, fill = NA, align = "center")
rat_mn = c(NA, rat_mn[1:19])
rat_mn
seasonal_data$rat_mn = rat_mn
seasonal_data
seasonal_data$sn_rel = seasonal_data$No_of_tourists/ seasonal_data$rat_mn * 100
seasonal_data
seas_wide = pivot_wider(seasonal_data[, c(1, 2, 6)], names_from = Year, values_from = sn_rel)
seas_wide
seas_wide$median = apply(seas_wide[,2:6], 1, function(x) median(x, na.rm = T))
seas_wide
tot_seas_median = mean(seas_wide$median)
seas_wide$seas_ind = seas_wide$median / tot_seas_median * 100
seas_wide
present_month = function(data, x, season_size){
mov_avg = zoo::rollmean(data[[x]], k = season_size, fill = NA, align = "center")
print("The moving average is:")
print(mov_avg)
rat_mn = zoo::rollmean(mov_avg, k = 2, fill = NA, align = "center")
rat_mn = c(NA, rat_mn[1:(length(rat_mn) -1)])
print("The centralized moving average is:")
print(rat_mn)
sn_rel = month_data$No_of_tourists/ rat_mn * 100
print("The seasonal relative is:")
print(sn_rel)
long = data.frame(Year = data[,2],
Season = data[, 1],
sn_rel = sn_rel)
wide = pivot_wider(long, names_from = Year, values_from = sn_rel)
print("The data in wide format is:")
print(wide)
wide$median = apply(wide[,2:ncol(wide)], 1, function(x) median(x, na.rm = T))
tot_seas_median = mean(wide$median)
wide$seas_ind = wide$median / tot_seas_median * 100
print("With seasonal index")
return(wide)
}
month_data = Mid_sem_dataset[, c(2, 3, 4)]
colnames(month_data)
month_wide = present_month(month_data,"No_of_tourists", 12)
month_wide
monthly_smoothed_data = data.frame(month = rep(month_wide$Month, 5),
year = rep(seq(2019, 2023), 12),
tourists = month_data$No_of_tourists,
adj_seas_ind = rep(month_wide$seas_ind, 5))
monthly_smoothed_data$deseason = monthly_smoothed_data$tourists/ monthly_smoothed_data$adj_seas_ind * 100
monthly_smoothed_data
quarter_smoothed_data = data.frame(quarter = rep(seas_wide$Season, 5),
year = rep(seq(2019, 2023), 4),
adj_seas_ind = rep(seas_wide$seas_ind, 5))
quarter_smoothed_data = quarter_smoothed_data[order(quarter_smoothed_data$year),]
quarter_smoothed_data$tourist = seasonal_data$No_of_tourists
quarter_smoothed_data$deseasoned = quarter_smoothed_data$tourist/quarter_smoothed_data$adj_seas_ind * 100
rownames(quarter_smoothed_data) = NULL
quarter_smoothed_data
nrow(monthly_smoothed_data)
monthly_smoothed_data$t = seq(1:nrow(monthly_smoothed_data))
med_month_t = median(monthly_smoothed_data$t)
monthly_smoothed_data$x_t = 2*(monthly_smoothed_data$t - med_month_t)
monthly_smoothed_data$t_sqrd = monthly_smoothed_data$t^2
monthly_smoothed_data
sum(monthly_smoothed_data$x_t)
monthly_smoothed_data$XY = monthly_smoothed_data$deseason * monthly_smoothed_data$x_t
monthly_smoothed_data$x_sqrd = monthly_smoothed_data$x_t^2
monthly_smoothed_data
summary(lm(deseason~x_t, data = monthly_smoothed_data))
summary(lm(deseason~poly(x_t, 2, raw = T), data = monthly_smoothed_data))
summary(lm(deseason~x_t + x_sqrd, data = monthly_smoothed_data))
summary(nls(deseason~a + exp(b * x_t), data = monthly_smoothed_data, start = list(a = 1, b = 0.1)))
quadratic_model = lm(deseason~poly(x_t, 2, raw = T), data = monthly_smoothed_data)
linear_model = lm(deseason~x_t, data = monthly_smoothed_data)
linear_residual_R = summary(linear_model)$sigma
quadrat_residual_R = summary(quadratic_model)$sigma
if (linear_residual_R < quadrat_residual_R){
print("Linear Model is the best model")
}else if(linear_residual_R == quadrat_residual_R){
print("any model can be used")
}else{
print("Quadratic Model is the best model")
}
exp_model = nls(deseason~a + exp(b * x_t), data = monthly_smoothed_data, start = list(a = 1, b = 0.1))
exp_residual_R = summary(exp_model)$sigma
if (exp_residual_R < quadrat_residual_R){
print("Exponential Model is the best model")
}else if(linear_residual_R == quadrat_residual_R){
print("any model can be used; Exponential or Quadratic")
}else{
print("Quadratic Model is the best model")
}
coeff_monthly = coef(quadratic_model)
coeff_monthly
monthly_b0 = coeff_monthly[1]
monthly_b1 = coeff_monthly[2]
monthly_b2 = coeff_monthly[3]
monthly_smoothed_data$trend = monthly_b0 + (monthly_b1 * monthly_smoothed_data$t) + (monthly_b2 * monthly_smoothed_data$t_sqrd)
monthly_smoothed_data
nrow(quarter_smoothed_data)
quarter_smoothed_data$t = seq(1, 20)
med_quarter = median(quarter_smoothed_data$t)
quarter_smoothed_data$x = 2 * (quarter_smoothed_data$t- med_quarter)
quadratic_model_q = lm(deseasoned~poly(x, 2, raw = T), data = quarter_smoothed_data)
linear_model_q = lm(deseasoned~x, data = quarter_smoothed_data)
linear_residual_R = summary(linear_model_q)$sigma
quadrat_residual_R = summary(quadratic_model_q)$sigma
if (linear_residual_R < quadrat_residual_R){
print("Linear Model is the best model")
}else if(linear_residual_R == quadrat_residual_R){
print("any model can be used")
}else{
print("Quadratic Model is the best model")
}
quarter_smoothed_data$log_deseason = log(quarter_smoothed_data$deseasoned)
exp_model_q = lm(log_deseason~x, data = quarter_smoothed_data)
exp_residual_R = summary(exp_model_q)$sigma
if (exp_residual_R < quadrat_residual_R){
print("Exponential Model is the best model")
}else if(linear_residual_R == quadrat_residual_R){
print("any model can be used; Exponential or Quadratic")
}else{
print("Quadratic Model is the best model")
}
quarter_smoothed_data$XY = quarter_smoothed_data$deseasoned * quarter_smoothed_data$x
quarter_smoothed_data$x_sqrd = quarter_smoothed_data$x^2
quarter_smoothed_data$t_sqrd = quarter_smoothed_data$t^2
quarter_coeff = coef(exp_model_q)
quarter_coeff
quarter_b0 = exp(quarter_coeff[1])
quarter_b0
quarter_b1 = quarter_coeff[2]
quarter_b1
quarter_smoothed_data$trend = quarter_b0 + exp(quarter_b1 * quarter_smoothed_data$t)
quarter_smoothed_data
monthly_smoothed_data$cyclic = monthly_smoothed_data$deseason/ monthly_smoothed_data$trend * 100
monthly_smoothed_data
quarter_smoothed_data$cyclic = quarter_smoothed_data$deseason/ quarter_smoothed_data$trend * 100
quarter_smoothed_data
months = c(
"January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December"
)
monthly_smoothed_data$month = factor(monthly_smoothed_data$month, levels = months)
monthly_smoothed_data$season_year = paste(monthly_smoothed_data$month, monthly_smoothed_data$year)
monthly_smoothed_data$season_year = factor(monthly_smoothed_data$season_year, levels = unique(monthly_smoothed_data$season_year))
#
#
ggplot(monthly_smoothed_data, aes(x = season_year)) +
geom_line(aes(y = tourists, color = "original"), group = 1) +
# geom_line(aes(y = adj_seas_ind, color = "seasonal"), group = 1) +
geom_line(aes(y = deseason, color = "deseason"), group = 1, linetype = "dotted") +
geom_line(aes(y = trend, color = "trend"), group = 1) +
geom_line(aes(y = cyclic, color = "cyclic"), group = 1) +
labs(title = "Seasonal Index from Summer 2019 to Spring 2023",
x = "Time",
y = "Seasonal Index") +
theme_minimal() +
scale_color_manual(name = "Legend", values = c("original" = "black", "seasonal"= "red", "trend"= "blue", "cyclic" = "darkgreen", "deseason" = "purple"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
quarter_smoothed_data$date = as.Date(paste(quarter_smoothed_data$year, as.numeric(quarter_smoothed_data$quarter) * 3 - 2, "1", sep = "-"), format = "%Y-%m-%d")
quarter_smoothed_data$season_year = paste(quarter_smoothed_data$quarter, quarter_smoothed_data$year)
ggplot(quarter_smoothed_data, aes(x = date)) +
geom_line(aes(y = tourist, color = "original"), group = 1) +
geom_line(aes(y = deseasoned, color = "deseason"), group = 1, linetype = "dotted") +
geom_line(aes(y = trend, color = "trend"), group = 1) +
geom_line(aes(y = cyclic, color = "cyclic"), group = 1) +
labs(title = "Quarterly Seasonal Index from Summer 2019 to Spring 2023",
x = "Time",
y = "Seasonal Index") +
theme_minimal() +
scale_color_manual(name = "Legend", values = c("original" = "black", "trend"= "blue", "cyclic" = "darkgreen", "deseason" = "purple"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
