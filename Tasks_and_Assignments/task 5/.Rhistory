title = "simulated time series data",
xlab = "time",
ylab = "Simulated"
)+
theme_minimal()
auto_corr_func = function(data, k){
n = length(data)
mu = mean(data)
if(k == 0){
return(1)
}else{
num = sum(((data[(k+1): n]) - mu)  *((data[1: (n-k)]) - mu))
denom = sum((data -mu)^2)
autocorr = num/denom
return(autocorr)
}
}
plot_data_acf_q1 = data.frame(
lag = seq(0,25)
)
data_acf = q1_plot$data
for(i in seq(0,25)){
col_name = paste("ACF_k_", i)
plot_data_acf_q1[[col_name]] = auto_corr_func(data_acf, i)
}
print(paste("There are:", ncol(plot_data_acf_q1)-1,"\nThe first 6 are:"))
head(plot_data_acf_q1)
plot_data_acf_q1$acf = c(unlist(unname(plot_data_acf_q1[1, 2:27])))
N = length(plot_data_acf_q1$acf)
std_error = 0.5/sqrt(N)
ggplot(plot_data_acf_q1, aes(x = lag, y = acf)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
geom_hline(yintercept = c(-std_error, std_error), linetype = "dashed", color = "red") +
labs(
title = "Autocorrelation Function (ACF)",
x = "Lag",
y = "Autocorrelation") +
theme_minimal()
acf(q1_data, main = "ACF of Simulated ARMA(2,1) Data")
pacf(q1_data, main = "PACF of Simulated ARMA(2,1) Data")
arma_model_q1 = arima(q1_data, order= c(2, 0, 1))
summary(arma_model_q1)
knitr::opts_chunk$set(echo = TRUE)
library(stats)
set.seed(2222)
q1_data = arima.sim(n = 500, model = list(ar = c(0.5, 0.3), ma = c(0.4)))
head(q1_data)
q1_plot = data.frame(
time = seq(1,500),
data = as.numeric(q1_data)
)
head(q1_plot)
library(ggplot2)
ggplot(q1_plot, aes(x = time, y = data))+
geom_line()+
labs(
title = "simulated time series data",
xlab = "time",
ylab = "Simulated"
)+
theme_minimal()
auto_corr_func = function(data, k){
n = length(data)
mu = mean(data)
if(k == 0){
return(1)
}else{
num = sum(((data[(k+1): n]) - mu)  *((data[1: (n-k)]) - mu))
denom = sum((data -mu)^2)
autocorr = num/denom
return(autocorr)
}
}
plot_data_acf_q1 = data.frame(
lag = seq(0,25)
)
data_acf = q1_plot$data
for(i in seq(0,25)){
col_name = paste("ACF_k_", i)
plot_data_acf_q1[[col_name]] = auto_corr_func(data_acf, i)
}
print(paste("There are:", ncol(plot_data_acf_q1)-1,"\nThe first 6 are:"))
head(plot_data_acf_q1)
plot_data_acf_q1$acf = c(unlist(unname(plot_data_acf_q1[1, 2:27])))
N = length(plot_data_acf_q1$acf)
std_error = 0.5/sqrt(N)
ggplot(plot_data_acf_q1, aes(x = lag, y = acf)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
geom_hline(yintercept = c(-std_error, std_error), linetype = "dashed", color = "red") +
labs(
title = "Autocorrelation Function (ACF)",
x = "Lag",
y = "Autocorrelation") +
theme_minimal()
acf(q1_data, main = "ACF of Simulated ARMA(2,1) Data")
pacf(q1_data, main = "PACF of Simulated ARMA(2,1) Data")
arma_model_q1 = arima(q1_data, order= c(2, 0, 1))
summary(arma_model_q1)
library(forecast)
set.seed(1111)
sim_arima = Arima(ts(rnorm(500)), order = c(1, 1, 1), c(0.65, NA, 0.4))
head(sim_arima)
install.packages(c("bitops", "bslib", "checkmate", "cli", "clock", "colorspace", "crayon", "cubature", "DBI", "dbscan", "digest", "downlit", "evaluate", "future", "gert", "ggsci", "gt", "gtsummary", "hardhat", "httr2", "ipred", "knitr", "lme4", "magick", "markdown", "nloptr", "openxlsx", "parallelly", "pbkrtest", "pkgdown", "pkgload", "prodlim", "ps", "Rcpp", "RcppArmadillo", "reactR", "recipes", "reprex", "reticulate", "rlang", "roxygen2", "shiny", "SparseM", "survival", "tinytex", "usethis", "uuid", "xfun", "yaml"))
setwd("C:/Users/ADMIN/Documents/SEM 2 2024/STA3050 time series/Tasks_and_Assignments/task 5")
knitr::opts_chunk$set(echo = TRUE)
library(stats)
set.seed(2222)
q1_data = arima.sim(n = 500, model = list(ar = c(0.5, 0.3), ma = c(0.4)))
head(q1_data)
q1_plot = data.frame(
time = seq(1,500),
data = as.numeric(q1_data)
)
head(q1_plot)
library(ggplot2)
ggplot(q1_plot, aes(x = time, y = data))+
geom_line()+
labs(
title = "simulated time series data",
xlab = "time",
ylab = "Simulated"
)+
theme_minimal()
auto_corr_func = function(data, k){
n = length(data)
mu = mean(data)
if(k == 0){
return(1)
}else{
num = sum(((data[(k+1): n]) - mu)  *((data[1: (n-k)]) - mu))
denom = sum((data -mu)^2)
autocorr = num/denom
return(autocorr)
}
}
plot_data_acf_q1 = data.frame(
lag = seq(0,25)
)
data_acf = q1_plot$data
for(i in seq(0,25)){
col_name = paste("ACF_k_", i)
plot_data_acf_q1[[col_name]] = auto_corr_func(data_acf, i)
}
print(paste("There are:", ncol(plot_data_acf_q1)-1,"\nThe first 6 are:"))
head(plot_data_acf_q1)
plot_data_acf_q1$acf = c(unlist(unname(plot_data_acf_q1[1, 2:27])))
N = length(plot_data_acf_q1$acf)
std_error = 0.5/sqrt(N)
ggplot(plot_data_acf_q1, aes(x = lag, y = acf)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
geom_hline(yintercept = c(-std_error, std_error), linetype = "dashed", color = "red") +
labs(
title = "Autocorrelation Function (ACF)",
x = "Lag",
y = "Autocorrelation") +
theme_minimal()
acf(q1_data, main = "ACF of Simulated ARMA(2,1) Data")
pacf(q1_data, main = "PACF of Simulated ARMA(2,1) Data")
arma_model_q1 = arima(q1_data, order= c(2, 0, 1))
summary(arma_model_q1)
library(forecast)
set.seed(1111)
sim_arima = Arima(ts(rnorm(500)), order = c(1, 1, 1), c(0.65, NA, 0.4))
head(sim_arima)
data_q2 = sim_arima$x
data_q2 = sim_arima$x
plot_data_q1 = data.frame(
time = seq(1, 500),
data = data_q2
)
ggplot(plot_data_q1, aes(x = time, y = data))+
geom_line()+
labs(
title = "simulated ARIMA data",
xlab = "time",
ylab = "Simulated"
)+
theme_minimal()
plot_data_q1 = data.frame(
time = seq(1, 500),
data = as.numeric(data_q2)
)
ggplot(plot_data_q1, aes(x = time, y = data))+
geom_line()+
labs(
title = "simulated ARIMA data",
xlab = "time",
ylab = "Simulated"
)+
theme_minimal()
set.seed(1111)
sim_arima = arima.sim(n = 500, list(order = c(1, 1, 1), ar = (0.65), ma = c(0.4)))
head(sim_arima)
sim_arima
data_q2 = as.numeric(sim_arima)
plot_data_q1 = data.frame(
time = seq(1, 500),
data = data_q2
)
sim_arima
data_q2 = as.numeric(sim_arima)
tail(data_q2)
plot_data_q1 = data.frame(
time = seq(0, 500),
data = data_q2
)
ggplot(plot_data_q1, aes(x = time, y = data))+
geom_line()+
labs(
title = "simulated ARIMA data",
xlab = "time",
ylab = "Simulated"
)+
theme_minimal()
plot_data_q2 = data.frame(
time = seq(0, 500),
data = data_q2
)
ggplot(plot_data_q2, aes(x = time, y = data))+
geom_line()+
labs(
title = "simulated ARIMA data",
xlab = "time",
ylab = "Simulated"
)+
theme_minimal()
acf(plot_data_q2, main = "The ACF for the ARIMA data")
stationary_arima = diff(sim_arima, differences =  1)
library(tseries)
adf.test(stationary_arima, alternative = "stationary")
acf(stationary_arima, main = "The ACF for the ARIMA data")
pacf(stationary_arima, main = "Partial ACF of the generated ARIMA data")
library(tseries)
adf.test(q1_plot$data, alternative = "stationary")
set.seed(1111)
sim_arima = arima.sim(n = 499, list(order = c(1, 1, 1), ar = (0.65), ma = c(0.4)))
head(sim_arima)
plot_data_q2 = data.frame(
time = seq(0, 499),
data = data_q2
)
data_q2 = as.numeric(sim_arima)
plot_data_q2 = data.frame(
time = seq(0, 499),
data = data_q2
)
ggplot(plot_data_q2, aes(x = time, y = data))+
geom_line()+
labs(
title = "simulated ARIMA data",
xlab = "time",
ylab = "Simulated"
)+
theme_minimal()
adf.test(sim_arima, alternative = "stationary")
arma_model_q1 = arima(q1_data, order= c(2, 0, 1))
summary(arma_model_q1)
q2_model = Arima(sim_arima, order = c(1, 1, 1))
summary(q2_model)
checkresiduals(arma_model_q1)
Box.test(fitted_model$residuals, lag = 20, type = "Ljung-Box")
Box.test(arma_model_q1$residuals, lag = 25, type = "Ljung-Box")
forecst_q1 = data.frame(
time = seq(500, 520),
data = forecast(arma_model_q1, h = 20)
)
forecst_q1 = data.frame(
time = seq(500, 519),
data = forecast(arma_model_q1, h = 20)
)
ggplot(forecst_q1, aes(x = time, y = data))+
geom_line()+
labs(
title = "forecasted ARMA data",
xlab = "time",
ylab = "Simulated"
)+
theme_minimal()
forecst_q1 = data.frame(
time = seq(500, 519),
data = as.numeric(forecast(arma_model_q1, h = 20))
)
forecast(arma_model_q1, h = 20)
forcst = forecast(arma_model_q1, h = 20)
forcst
forecst_q1 = data.frame(
time = seq(501, 520),
PointForecast = forcst$mean,
Lo80 = forcst$lower[,1],
Hi80 = forcst$upper[,1],
Lo95 = forcst$lower[,2],
Hi95 = forcst$upper[,2]
)
ggplot(forecst_q1, aes(x = time))+
geom_line(aes(y = PointForecast), color = "blue", size = 1) +
geom_ribbon(aes(ymin = Lo95, ymax = Hi95), fill = "blue", alpha = 0.2) + # 95% CI
geom_ribbon(aes(ymin = Lo80, ymax = Hi80), fill = "blue", alpha = 0.4) + # 80% CI
labs(title = "ARMA Forecast with Confidence Intervals",
x = "Time",
y = "Forecasted Value") +
theme_minimal()
forecst_q1 = data.frame(
time = seq(501, 520),
PointForecast = forcst$mean,
Lo80 = forcst$lower[,1],
Hi80 = forcst$upper[,1],
Lo95 = forcst$lower[,2],
Hi95 = forcst$upper[,2]
)
ggplot(forecst_q1, aes(x = time))+
geom_line(aes(y = PointForecast), color = "blue") +
geom_ribbon(aes(ymin = Lo95, ymax = Hi95), fill = "blue", alpha = 0.2) +
geom_ribbon(aes(ymin = Lo80, ymax = Hi80), fill = "blue", alpha = 0.4) +
labs(title = "ARMA Forecast with Confidence Intervals",
x = "Time",
y = "Forecasted Value") +
theme_minimal()
forecst_q1 = data.frame(
time = seq(501, 520),
PointForecast = forcst$mean,
Lo80 = as.numeric(forcst$lower[,1]),
Hi80 = as.numeric(forcst$upper[,1]),
Lo95 = as.numeric(forcst$lower[,2]),
Hi95 = as.numeric(forcst$upper[,2])
)
ggplot(forecst_q1, aes(x = time))+
geom_line(aes(y = PointForecast), color = "blue") +
geom_ribbon(aes(ymin = Lo95, ymax = Hi95), fill = "blue", alpha = 0.2) +
geom_ribbon(aes(ymin = Lo80, ymax = Hi80), fill = "blue", alpha = 0.4) +
labs(title = "ARMA Forecast with Confidence Intervals",
x = "Time",
y = "Forecasted Value") +
theme_minimal()
forecst_q1 = data.frame(
time = seq(501, 520),
PointForecast = as.numeric(forcst$mean),
Lo80 = as.numeric(forcst$lower[,1]),
Hi80 = as.numeric(forcst$upper[,1]),
Lo95 = as.numeric(forcst$lower[,2]),
Hi95 = as.numeric(forcst$upper[,2])
)
ggplot(forecst_q1, aes(x = time))+
geom_line(aes(y = PointForecast), color = "blue") +
geom_ribbon(aes(ymin = Lo95, ymax = Hi95), fill = "blue", alpha = 0.2) +
geom_ribbon(aes(ymin = Lo80, ymax = Hi80), fill = "blue", alpha = 0.4) +
labs(title = "ARMA Forecast with Confidence Intervals",
x = "Time",
y = "Forecasted Value") +
theme_minimal()
forecst_q1 = data.frame(
time = seq(501, 520),
PointForecast = as.numeric(forcst$mean),
Lo80 = as.numeric(forcst$lower[,1]),
Hi80 = as.numeric(forcst$upper[,1]),
Lo95 = as.numeric(forcst$lower[,2]),
Hi95 = as.numeric(forcst$upper[,2])
)
ggplot(forecst_q1, aes(x = time))+
geom_line(aes(y = PointForecast), color = "blue") +
geom_ribbon(aes(ymin = Lo95, ymax = Hi95), fill = "darkgreen", alpha = 0.2) +
geom_ribbon(aes(ymin = Lo80, ymax = Hi80), fill = "green", alpha = 0.4) +
labs(title = "ARMA Forecast with Confidence Intervals",
x = "Time",
y = "Forecasted Value") +
theme_minimal()
acf(stationary_arima, main = "The ACF for the ARIMA data")
checkresiduals(q2_model)
forecst_data = forecast(q2_model, h = 20)
forecst_data
forecst_q2 = data.frame(
time = seq(501, 520),
PointForecast = as.numeric(forecst_data$mean),
Lo80 = as.numeric(forecst_data$lower[,1]),
Hi80 = as.numeric(forecst_data$upper[,1]),
Lo95 = as.numeric(forecst_data$lower[,2]),
Hi95 = as.numeric(forecst_data$upper[,2])
)
ggplot(forecst_q2, aes(x = time))+
geom_line(aes(y = PointForecast), color = "blue") +
geom_ribbon(aes(ymin = Lo95, ymax = Hi95), fill = "orange", alpha = 0.2) +
geom_ribbon(aes(ymin = Lo80, ymax = Hi80), fill = "green", alpha = 0.4) +
labs(title = "ARIMA Forecast with Confidence Intervals",
x = "Time",
y = "Forecasted Value") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(stats)
library(forecast)
library(tseries)
set.seed(2222)
q1_data = arima.sim(n = 500, model = list(ar = c(0.5, 0.3), ma = c(0.4)))
head(q1_data)
q1_arma_data = data.frame(
time = seq(1,500),
data = as.numeric(q1_data)
)
head(q1_arma_data)
library(ggplot2)
ggplot(q1_arma_data, aes(x = time, y = data))+
geom_line()+
labs(
title = "simulated ARMA data",
xlab = "time",
ylab = "Simulated"
)+
theme_minimal()
library(tseries)
adf.test(q1_arma_data$data, alternative = "stationary")
auto_corr_func = function(data, k){
n = length(data)
mu = mean(data)
if(k == 0){
return(1)
}else{
num = sum(((data[(k+1): n]) - mu)  *((data[1: (n-k)]) - mu))
denom = sum((data -mu)^2)
autocorr = num/denom
return(autocorr)
}
}
plot_data_acfs = data.frame(
lag = seq(0,25)
)
data_acf = q1_arma_data$data
for(i in seq(0,25)){
col_name = paste("ACF_k_", i)
plot_data_acfs[[col_name]] = auto_corr_func(data_acf, i)
}
print(paste("There are:", ncol(plot_data_acfs)-1,"\nThe first 6 are:"))
head(plot_data_acfs)
plot_data_acfs$acf = c(unlist(unname(plot_data_acfs[1, 2:27])))
N = length(plot_data_acfs$acf)
std_error = 0.5/sqrt(N)
ggplot(plot_data_acfs, aes(x = lag, y = acf)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
geom_hline(yintercept = c(-std_error, std_error), linetype = "dashed", color = "red") +
labs(
title = "Autocorrelation Function (ACF)",
x = "Lag",
y = "Autocorrelation") +
theme_minimal()
acf(q1_data, main = "ACF of Simulated ARMA(2,1) Data")
pacf(q1_data, main = "PACF of Simulated ARMA(2,1) Data")
arma_model_q1 = arima(q1_data, order= c(2, 0, 1))
summary(arma_model_q1)
checkresiduals(arma_model_q1)
Box.test(arma_model_q1$residuals, lag = 25, type = "Ljung-Box")
forcst = forecast(arma_model_q1, h = 20)
forcst
forecst_q1 = data.frame(
time = seq(501, 520),
PointForecast = as.numeric(forcst$mean),
Lo80 = as.numeric(forcst$lower[,1]),
Hi80 = as.numeric(forcst$upper[,1]),
Lo95 = as.numeric(forcst$lower[,2]),
Hi95 = as.numeric(forcst$upper[,2])
)
ggplot(forecst_q1, aes(x = time))+
geom_line(aes(y = PointForecast), color = "blue") +
geom_ribbon(aes(ymin = Lo95, ymax = Hi95), fill = "darkgreen", alpha = 0.2) +
geom_ribbon(aes(ymin = Lo80, ymax = Hi80), fill = "green", alpha = 0.4) +
labs(title = "ARMA Forecast with Confidence Intervals",
x = "Time",
y = "Forecasted Value") +
theme_minimal()
library(forecast)
set.seed(1111)
sim_arima = arima.sim(n = 499, list(order = c(1, 1, 1), ar = (0.65), ma = c(0.4)))
head(sim_arima)
data_q2 = as.numeric(sim_arima)
plot_data_q2 = data.frame(
time = seq(0, 499),
data = data_q2
)
ggplot(plot_data_q2, aes(x = time, y = data))+
geom_line()+
labs(
title = "simulated ARIMA data",
xlab = "time",
ylab = "Simulated"
)+
theme_minimal()
adf.test(sim_arima, alternative = "stationary")
stationary_arima = diff(sim_arima, differences =  1)
adf.test(stationary_arima, alternative = "stationary")
acf(stationary_arima, main = "The ACF for the ARIMA data")
pacf(stationary_arima, main = "Partial ACF of the generated ARIMA data")
q2_model = Arima(sim_arima, order = c(1, 1, 1))
summary(q2_model)
checkresiduals(q2_model)
forecst_data = forecast(q2_model, h = 20)
forecst_data
forecst_q2 = data.frame(
time = seq(501, 520),
PointForecast = as.numeric(forecst_data$mean),
Lo80 = as.numeric(forecst_data$lower[,1]),
Hi80 = as.numeric(forecst_data$upper[,1]),
Lo95 = as.numeric(forecst_data$lower[,2]),
Hi95 = as.numeric(forecst_data$upper[,2])
)
ggplot(forecst_q2, aes(x = time))+
geom_line(aes(y = PointForecast), color = "blue") +
geom_ribbon(aes(ymin = Lo95, ymax = Hi95), fill = "orange", alpha = 0.2) +
geom_ribbon(aes(ymin = Lo80, ymax = Hi80), fill = "green", alpha = 0.4) +
labs(title = "ARIMA Forecast with Confidence Intervals",
x = "Time",
y = "Forecasted Value") +
theme_minimal()
