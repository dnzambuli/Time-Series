breaks = year_breaks$start_t,
labels = year_breaks$Year)+
theme_minimal()
data$stab_var = log(data$Passangers)
data$no_annual_sn = c(rep(NA, 12), diff(data$stab_var, lag = 12))
ggplot(data, aes(x = t, y = no_annual_sn)) +
geom_line(color = "blue") +
labs(
title = "Air Passengers Between 1949 and 1961",
y = "Passengers"
) +
geom_vline(xintercept = january, color = "red", linetype = "dashed")+
geom_smooth(method = lm, se = F, color = "darkgreen")+
scale_x_continuous(name = "Time (Year-Month)",
breaks = year_breaks$start_t,
labels = year_breaks$Year)+
theme_minimal()
data$sec_dif = diff(data$no_annual_sn, lag = 1)
data$sec_dif = c(NA, diff(data$no_annual_sn, lag = 1))
data$sec_dif = c(diff(data$no_annual_sn, lag = 1), NA)
ggplot(data, aes(x = t, y = no_annual_sn)) +
geom_line(color = "blue") +
labs(
title = "Air Passengers Between 1949 and 1961",
y = "Passengers"
) +
geom_vline(xintercept = january, color = "red", linetype = "dashed")+
geom_smooth(method = lm, se = F, color = "darkgreen")+
scale_x_continuous(name = "Time (Year-Month)",
breaks = year_breaks$start_t,
labels = year_breaks$Year)+
theme_minimal()
ggplot(data, aes(x = t, y = sec_diff)) +
geom_line(color = "blue") +
labs(
title = "Air Passengers Between 1949 and 1961",
y = "Passengers"
) +
geom_vline(xintercept = january, color = "red", linetype = "dashed")+
geom_smooth(method = lm, se = F, color = "darkgreen")+
scale_x_continuous(name = "Time (Year-Month)",
breaks = year_breaks$start_t,
labels = year_breaks$Year)+
theme_minimal()
ggplot(data, aes(x = t, y = sec_dif)) +
geom_line(color = "blue") +
labs(
title = "Air Passengers Between 1949 and 1961",
y = "Passengers"
) +
geom_vline(xintercept = january, color = "red", linetype = "dashed")+
geom_smooth(method = lm, se = F, color = "darkgreen")+
scale_x_continuous(name = "Time (Year-Month)",
breaks = year_breaks$start_t,
labels = year_breaks$Year)+
theme_minimal()
acf(ts(data$sec_dif), lag.max = 45,main = "ACF plot of passangers between 1949 and 61")
acf(ts(na.omit(data$sec_dif)), lag.max = 45,main = "ACF plot of passangers between 1949 and 61")
acf(ts(na.omit(data$sec_dif)),main = "ACF plot of passangers between 1949 and 61")
pacf(ts(na.omit(data$sec_dif)),main = "PACF plot of passangers between 1949 and 61")
?arima()
arma_model = arima(ts(na.omit(data$sec_dif)), order = c(1, 0, 0), seasonal = list(order = c(0, 1, 0)), period = 12)
arma_model = arima(ts(na.omit(data$sec_dif)), order = c(1, 0, 0), seasonal = list(order = c(0, 1, 0), period = 12))
summary(arma_model)
arma_model = arima(ts(na.omit(data$sec_dif)), order = c(1, 0, 0), seasonal = list(order = c(0, 1, 0), period = 12))
checkresiduals(arma_model)
arma_model = arima(ts(na.omit(data$sec_dif)), order = c(1, 0, 0), seasonal = list(order = c(0, 1, 0), period = 13))
checkresiduals(arma_model)
arma_model = arima(ts(na.omit(data$sec_dif)), order = c(1, 0, 0), seasonal = list(order = c(0, 1, 0), period = 12))
checkresiduals(arma_model)
ggplot(data, aes(x = t, y = no_annual_sn)) +
geom_line(color = "blue") +
labs(
title = "Air Passengers Between 1949 and 1961",
y = "Passengers"
) +
geom_vline(xintercept = january, color = "red", linetype = "dashed")+
geom_smooth(method = lm, se = F, color = "darkgreen")+
scale_x_continuous(name = "Time (Year-Month)",
breaks = year_breaks$start_t,
labels = year_breaks$Year)+
theme_minimal()
ggplot(data, aes(x = t, y = sec_dif)) +
geom_line(color = "blue") +
labs(
title = "Air Passengers Between 1949 and 1961",
y = "Passengers"
) +
geom_vline(xintercept = january, color = "red", linetype = "dashed")+
geom_smooth(method = lm, se = F, color = "darkgreen")+
scale_x_continuous(name = "Time (Year-Month)",
breaks = year_breaks$start_t,
labels = year_breaks$Year)+
theme_minimal()
arma_model = arima(ts(na.omit(data$sec_dif)), order = c(2, 0, 0), seasonal = list(order = c(0, 1, 0), period = 12))
checkresiduals(arma_model)
arma_model = arima(ts(na.omit(data$sec_dif)), order = c(2, 0, 1), seasonal = list(order = c(0, 1, 0), period = 12))
checkresiduals(arma_model)
q8_arima = arima(AirPassengers, order = c(2, 1, 0))
checkresiduals(q8_arima)
fit_arima = function(p, d, q){
q8_arima = arima(AirPassengers, order = c(p, d, q))
coef = coef(fit)
se = sqrt(diag(fit$var.coef))
t_value = coef / se
p_value <- 2 * pt(-abs(t_value), df = df)
return(p_value)
}
for(i in 0:20){
for(j in 0:20){
for(k in 0:20){
ar_val = fit_arima(k,i ,j)
if(ar_val >= 0.05){
print(paste("AR(", k, ") d(", i, "MA(", j,")"))
break
}
}
}
}
fit_arima = function(p, d, q){
q8_arima = arima(AirPassengers, order = c(p, d, q))
coef = coef(q8_arima)
se = sqrt(diag(q8_arima$var.coef))
t_value = coef / se
p_value <- 2 * pt(-abs(t_value), df = df)
return(p_value)
}
for(i in 0:20){
for(j in 0:20){
for(k in 0:20){
ar_val = fit_arima(k,i ,j)
if(ar_val >= 0.05){
print(paste("AR(", k, ") d(", i, "MA(", j,")"))
break
}
}
}
}
q8_arima = arima(AirPassengers, order = c(p, d, q))
q8_arima = arima(AirPassengers, order = c(1, 1, 1))
coef = coef(q8_arima)
se = sqrt(diag(q8_arima$var.coef))
t_value = coef / se
p_value <- 2 * pt(-abs(t_value), df = df)
-abs(t_val)
-abs(t_value)
fit_arima = function(p, d, q){
q8_arima = arima(AirPassengers, order = c(p, d, q))
coef = coef(q8_arima)
se = sqrt(diag(q8_arima$var.coef))
t_value = coef / se
df <- length(AirPassengers) - length(coef)
p_value <- 2 * pt(-abs(t_value), df = df)
return(p_value)
}
for(i in 0:20){
for(j in 0:20){
for(k in 0:20){
ar_val = fit_arima(k,i ,j)
if(ar_val >= 0.05){
print(paste("AR(", k, ") d(", i, "MA(", j,")"))
break
}
}
}
}
fit_arima(1, 1, 1)
fit_arima(2, 2, 2)
fit_arima(2, 1, 2)
fit_arima(2, 1, 3)
fit_arima(1, 1, 3)
fit_arima(1, 1, 5)
auto.arima(AirPassengers)
auto.arima(AirPassengers) # (RDocumentation, 2024)
auto.arima(AirPassengers) # (RDocumentation, 2024)
q8_arima = arima(AirPassengers, order = c(2, 1, 1), seasonal = list(order = c(0, 1,0), period = 12))
summary(q8_arima)
checkresiduals(q8_arima)
checkresiduals(q8_arima)
q8_arima = arima(AirPassengers, order = c(2, 1, 1)) #, seasonal = list(order = c(0, 1,0), period = 12)
summary(q8_arima)
checkresiduals(q8_arima)
auto.arima(AirPassengers, seasonal = F) # (RDocumentation, 2024)
q8_arima = arima(AirPassengers, order = c(4, 1, 2)) #, seasonal = list(order = c(0, 1,0), period = 12)
summary(q8_arima)
checkresiduals(q8_arima)
q7_auto_arma = auto.arima(ts(na.omit(data$sec_dif)), d = 0, max.d = 0, seasonal = FALSE)
summary(q7_auto_arma)
checkresiduals(q7_auto_arma)
arma_model = arima(ts(na.omit(data$sec_dif)), order = c(0, 0, 1), seasonal = list(order = c(0, 1, 0), period = 12))
checkresiduals(arma_model)
q7_auto_arma = auto.arima(ts(na.omit(data$sec_dif)), d = 0, max.d = 0, seasonal = FALSE)
summary(q7_auto_arma)
checkresiduals(q7_auto_arma)
arma_model = arima(ts(na.omit(data$sec_dif)), order = c(0, 0, 1), seasonal = list(order = c(0, 1, 0), period = 12))
checkresiduals(arma_model)
q7_auto_arma = auto.arima(ts(na.omit(data$sec_dif)), d = 0, max.d = 0, seasonal = FALSE)
summary(q7_auto_arma)
checkresiduals(q7_auto_arma)
arma_model = arima(ts(na.omit(data$sec_dif)), order = c(0, 0, 1)) # ARMA seasonal , seasonal = list(order = c(0, 1, 0), period = 12)
checkresiduals(arma_model)
auto.arima(AirPassengers, seasonal = F) # (RDocumentation, 2024)
q8_arima = arima(AirPassengers, order = c(4, 1, 2)) #, seasonal = list(order = c(0, 1,0), period = 12)
forecast_Data = forecast(q8_arima, h=12)
View(forecast_Data)
forcst_plot = data.frame(
time = seq(145, 165),
PointForecast = as.numeric(forecst_data$mean),
Lo80 = as.numeric(forecst_data$lower[,1]),
Hi80 = as.numeric(forecst_data$upper[,1]),
Lo95 = as.numeric(forecst_data$lower[,2]),
Hi95 = as.numeric(forecst_data$upper[,2])
)
forecast_Data = forecast(q8_arima, h=12)
forcst_plot = data.frame(
time = seq(145, 165),
PointForecast = as.numeric(forecst_Data$mean),
Lo80 = as.numeric(forecst_Data$lower[,1]),
Hi80 = as.numeric(forecst_Data$upper[,1]),
Lo95 = as.numeric(forecst_Data$lower[,2]),
Hi95 = as.numeric(forecst_Data$upper[,2])
)
forecst_Data = forecast(q8_arima, h=12)
forcst_plot = data.frame(
time = seq(145, 165),
PointForecast = as.numeric(forecst_Data$mean),
Lo80 = as.numeric(forecst_Data$lower[,1]),
Hi80 = as.numeric(forecst_Data$upper[,1]),
Lo95 = as.numeric(forecst_Data$lower[,2]),
Hi95 = as.numeric(forecst_Data$upper[,2])
)
forcst_plot = data.frame(
time = seq(145, 157),
PointForecast = as.numeric(forecst_Data$mean),
Lo80 = as.numeric(forecst_Data$lower[,1]),
Hi80 = as.numeric(forecst_Data$upper[,1]),
Lo95 = as.numeric(forecst_Data$lower[,2]),
Hi95 = as.numeric(forecst_Data$upper[,2])
)
forcst_plot = data.frame(
time = seq(145, 156),
PointForecast = as.numeric(forecst_Data$mean),
Lo80 = as.numeric(forecst_Data$lower[,1]),
Hi80 = as.numeric(forecst_Data$upper[,1]),
Lo95 = as.numeric(forecst_Data$lower[,2]),
Hi95 = as.numeric(forecst_Data$upper[,2])
)
ggplot(forecst_plot, aes(x = time))+
geom_line(aes(y = PointForecast), color = "blue") +
geom_ribbon(aes(ymin = Lo95, ymax = Hi95), fill = "orange", alpha = 0.2) +
geom_ribbon(aes(ymin = Lo80, ymax = Hi80), fill = "green", alpha = 0.4) +
labs(title = "ARIMA Forecast with Confidence Intervals",
x = "Time",
y = "Forecasted Value") +
theme_minimal()
forcst_plot = data.frame(
time = seq(145, 156),
PointForecast = as.numeric(forecst_Data$mean),
Lo80 = as.numeric(forecst_Data$lower[,1]),
Hi80 = as.numeric(forecst_Data$upper[,1]),
Lo95 = as.numeric(forecst_Data$lower[,2]),
Hi95 = as.numeric(forecst_Data$upper[,2])
)
ggplot(forcst_plot, aes(x = time))+
geom_line(aes(y = PointForecast), color = "blue") +
geom_ribbon(aes(ymin = Lo95, ymax = Hi95), fill = "orange", alpha = 0.2) +
geom_ribbon(aes(ymin = Lo80, ymax = Hi80), fill = "green", alpha = 0.4) +
labs(title = "ARIMA Forecast with Confidence Intervals",
x = "Time",
y = "Forecasted Value") +
theme_minimal()
sample(AirPassengers, prob = 0.2)
sample(AirPassengers, prob = 0.2 * length(AirPassengers))
sample(1:length(AirPassengers), 0.2 * length(AirPassengers))
View(data)
samp = sample(1:length(AirPassengers), 0.2 * length(AirPassengers))
test_data = data[t = samp, ]
samp = sample(1:length(AirPassengers), 0.2 * length(AirPassengers))
test_data = data[t == samp, ]
samp = sample(1:length(AirPassengers), 0.2 * length(AirPassengers))
test_data = data[data$t == samp, ]
train_data = data[data$t != samp,]
auto.arima(ts(train_data$passangers), season = F)
samp = sample(1:length(AirPassengers), 0.2 * length(AirPassengers))
test_data = data[data$t == samp, ]
train_data = data[data$t != samp,]
auto.arima(ts(train_data$passangers), seasonal = F)
samp
set.seed(123)
samp = sample(1:144, round(0.2 * length(AirPassengers)))
test_data = data[data$t == samp, ]
train_data = data[data$t != samp,]
auto.arima(ts(train_data$passangers), seasonal = F)
set.seed(123)
sample(1:144, round(0.2 * length(AirPassengers)))
test_data = data[data$t == samp, ]
train_data = data[data$t != samp,]
set.seed(123)
n = length(AirPassengers)
samp = sample(1:n, round(0.2 * n))
test_data = data[data$t %in% samp, ]
train_data = data[data$t %in% samp,]
auto.arima(ts(train_data$passangers), seasonal = F)
set.seed(123)
n = length(AirPassengers)
samp = sample(1:n, round(0.2 * n))
test_data = data[data$t %in% samp, ]
train_data = data[!data$t %in% samp,]
auto.arima(ts(train_data$passangers), seasonal = F)
set.seed(123)
n = length(AirPassengers)
samp = sample(1:n, round(0.2 * n))
test_data = data[data$t %in% samp, ]
train_data = data[!data$t %in% samp,]
auto.arima(ts(train_data), seasonal = F)
set.seed(123)
n = length(AirPassengers)
samp = sample(1:n, round(0.2 * n))
test_data = data[data$t %in% samp, ]
train_data = data[!data$t %in% samp,]
auto.arima(ts(train_data), seasonal = F)
set.seed(123)
n = length(AirPassengers)
samp = sample(1:n, round(0.2 * n))
test_data = AirPassengers[samp]
train_data = AirPassengers[-samp]
auto.arima(train_data, seasonal = F)
accuracy_based_on_q8 = accuracy(forecast(q8_arima, test_len),
test_data)
set.seed(123)
n = length(AirPassengers)
samp = sample(1:n, round(0.2 * n))
test_data = AirPassengers[samp]
train_data = AirPassengers[-samp]
test_len = length(test_data)
accuracy_based_on_q8 = accuracy(forecast(q8_arima, test_len),
test_data)
accuracy_based_on_q8 = accuracy(forecast(q8_arima, test_len),
test_data)
accuracy_based_on_q8
new_q8_arima = arima(train_data, order = c(2, 1, 2))
summary(new_q8_arima)
new_q13_test = accuracy(forecast(new_q8_arima, test_len),
test_data)
new_q13_test = accuracy(forecast(new_q8_arima, test_len),
test_data)
new_q13_test
set.seed(123)
n = length(AirPassengers)
samp = sample(1:n, round(0.2 * n))
test_data = window(AirPassengers, samp)
set.seed(123)
n = length(AirPassengers)
samp = sample(1:n, round(0.2 * n))
test_data = AirPassengers[samp]
train_data = AirPassengers[!samp)
set.seed(123)
n = length(AirPassengers)
samp = sample(1:n, round(0.2 * n))
test_data = AirPassengers[samp]
train_data = AirPassengers[!samp]
test_len = length(test_data)
accuracy_based_on_q8 = accuracy(forecast(q8_arima, test_len),
test_data)
accuracy_based_on_q8
auto.arima(train_data, seasonal = F)
set.seed(123)
n = length(AirPassengers)
samp = sample(1:n, round(0.2 * n))
test_indices = rep(FALSE, n)
test_indices[samp] = TRUE
train_indices = !test_indices
test_data = AirPassengers[test_indices]
train_data = AirPassengers[train_indices]
test_len = length(test_data)
accuracy_based_on_q8 = accuracy(forecast(q8_arima, test_len),
test_data)
accuracy_based_on_q8
new_forcst = forecast(q8_arima, as.numeric(test_len))
accuracy_based_on_q8 = accuracy(new_forcst,
test_data)
accuracy_based_on_q8
auto.arima(train_data, seasonal = F)
new_q8_arima = arima(train_data, order = c(2, 1, 2))
summary(new_q8_arima)
new_q13_test = accuracy(forecast(new_q8_arima, test_len),
test_data)
new_q13_test
seasonal_arima = auto.arima(AirPassengers)
seasonal_arima
forecast(q8_arima, as.numeric(test_len))$x
test_data
View(new_forcst)
new_forcst = as.numeric(forecast(q8_arima, as.numeric(test_len))$mean)
accuracy_based_on_q8 = accuracy(new_forcst,
test_data)
accuracy_based_on_q8
new_q13_test = accuracy(as.numeric(forecast(new_q8_arima, test_len)$mean),
test_data)
new_q13_test
calculate_bic = function(model, data){
n = length(data)
p = model$rank
logL = model$loglik
bic = log(n) * p - 2 * logL
return(bic)
}
# ARIMA(4, 1, 2)
calculate_bic(q8_arima, AirPassengers)
# new arima(2, 1, 2)
calculate_bic(new_q8_arima, train_data)
q8_arima$arma
new_q8_arima = Arima(train_data, order = c(2, 1, 2))
summary(new_q8_arima)
q8_arima = Arima(AirPassengers, order = c(4, 1, 2)) #, seasonal = list(order = c(0, 1,0), period = 12)
summary(q8_arima)
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(tseries)
data("AirPassengers")
AirPassengers
data = data.frame(
Year = as.character(rep(seq(1949, 1960, 1), each  = 12)),
Month = (rep(c("Jan", "Feb", "Mar", "Apr", "May",
"Jun", "Jul", "Aug", "Sep", "Oct",
"Nov", "Dec"), times = 12)),
Passangers = as.numeric(AirPassengers),
t = seq(1: length(AirPassengers))
)
head(data)
library(dplyr)
data <- data %>%
mutate(
YearMonth = paste(Year, Month)
)
year_breaks <- data %>%
group_by(Year) %>%
summarize(start_t = min(t))
january = data %>% filter(Month == "Jan") %>% pull(t)
library(ggplot2)
ggplot(data, aes(x = t, y = Passangers)) +
geom_line(color = "blue") +
labs(
title = "Air Passengers Between 1949 and 1961",
y = "Passengers"
) +
geom_vline(xintercept = january, color = "red", linetype = "dashed")+
geom_smooth(method = lm, se = F, color = "darkgreen")+
scale_x_continuous(name = "Time (Year-Month)",
breaks = year_breaks$start_t,
labels = year_breaks$Year)+
theme_minimal()
adf.test(data$Passangers, alternative = "stationary")
acf(AirPassengers, lag.max = 45,main = "ACF plot of passangers between 1949 and 61")
pacf(AirPassengers, lag.max = 45,main = "PACF plot of passangers between 1949 and 61")
data$stab_var = log(data$Passangers)
data$no_annual_sn = c(rep(NA, 12), diff(data$stab_var, lag = 12))
data$sec_dif = c(diff(data$no_annual_sn, lag = 1), NA)
ggplot(data, aes(x = t, y = sec_dif)) +
geom_line(color = "blue") +
labs(
title = "Air Passengers Between 1949 and 1961",
y = "Passengers"
) +
geom_vline(xintercept = january, color = "red", linetype = "dashed")+
geom_smooth(method = lm, se = F, color = "darkgreen")+
scale_x_continuous(name = "Time (Year-Month)",
breaks = year_breaks$start_t,
labels = year_breaks$Year)+
theme_minimal()
acf(ts(na.omit(data$sec_dif)),main = "ACF plot of passangers between 1949 and 61")
pacf(ts(na.omit(data$sec_dif)),main = "PACF plot of passangers between 1949 and 61")
arma_model = arima(ts(na.omit(data$sec_dif)), order = c(0, 0, 1)) # ARMA seasonal , seasonal = list(order = c(0, 1, 0), period = 12)
checkresiduals(arma_model)
q7_auto_arma = auto.arima(ts(na.omit(data$sec_dif)), d = 0, max.d = 0, seasonal = FALSE)
summary(q7_auto_arma)
checkresiduals(q7_auto_arma)
auto.arima(AirPassengers, seasonal = F) # (RDocumentation, 2024)
q8_arima = Arima(AirPassengers, order = c(4, 1, 2)) #, seasonal = list(order = c(0, 1,0), period = 12)
summary(q8_arima)
checkresiduals(q8_arima)
forecst_Data = forecast(q8_arima, h=12)
forcst_plot = data.frame(
time = seq(145, 156),
PointForecast = as.numeric(forecst_Data$mean),
Lo80 = as.numeric(forecst_Data$lower[,1]),
Hi80 = as.numeric(forecst_Data$upper[,1]),
Lo95 = as.numeric(forecst_Data$lower[,2]),
Hi95 = as.numeric(forecst_Data$upper[,2])
)
ggplot(forcst_plot, aes(x = time))+
geom_line(aes(y = PointForecast), color = "blue") +
geom_ribbon(aes(ymin = Lo95, ymax = Hi95), fill = "orange", alpha = 0.2) +
geom_ribbon(aes(ymin = Lo80, ymax = Hi80), fill = "green", alpha = 0.4) +
labs(title = "ARIMA Forecast with Confidence Intervals",
x = "Time",
y = "Forecasted Value") +
theme_minimal()
set.seed(123)
n = length(AirPassengers)
samp = sample(1:n, round(0.2 * n))
test_indices = rep(FALSE, n)
test_indices[samp] = TRUE
train_indices = !test_indices
test_data = AirPassengers[test_indices]
train_data = AirPassengers[train_indices]
test_len = length(test_data)
auto.arima(train_data, seasonal = F)
new_q8_arima = Arima(train_data, order = c(2, 1, 2))
summary(new_q8_arima)
seasonal_arima = auto.arima(AirPassengers)
seasonal_arima
