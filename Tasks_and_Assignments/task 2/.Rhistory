plot_smth = function(y_data, col){
plot_data = data.frame(x = task_data$year,
y = task_data[[y_data]])
plot = ggplot(aes(x = x), data = plot_data)+
geom_line(aes(y = y, color = col))+
labs(
title = "GDP to Year Data",
x = "year",
y = "GDP"
)+
theme_minimal()
return(plot)
}
ggplot(aes(x = year), data = task_data)+
geom_line(aes(y = GDP, color = "original"))+
geom_line(aes(y = reg_smooth, color = "reg_smooth"))+
geom_line(aes(y = quad_smth, color = "quadratic_smth"))+
geom_line(aes(y = loes_pred, color = "loess_calc_pred"))+
geom_line(aes(y = math_quad, color = "math_calc_pred"))+
labs(
title = "GDP to Year Data",
x = "year",
y = "GDP"
)+
scale_color_manual(name = "Legend", values = c("original" = "black", "reg_smooth"= "red", "quadratic_smth"= "blue", "loess_calc_pred" = "green", "math_calc_pred" = "orange"))+
theme_minimal()
plot_smth("reg_smooth", "red")
plot_smth("quad_smth", "blue")
plot_smth("math_calc_pred", "orange")
knitr::opts_chunk$set(echo = TRUE)
task_data = data.frame(year = seq(2011, 2020),
GDP = c(35, 37, 51, 54, 62, 64, 74, 71, 83, 80))
task_data
med_yr = median(task_data$year)
task_data$zero_yr = task_data$year - med_yr
task_data
trend = lm(GDP~zero_yr, data = task_data)
trend$coefficients
# create the reg_smooth data
Beta_0 = trend$coefficients[1]
Beta_1 = trend$coefficients[2]
task_data$reg_smooth = Beta_1 * task_data$zero_yr + Beta_0
task_data
quad_smth = loess(GDP~zero_yr, task_data)
task_data$quad_smth = predict(quad_smth, task_data)
task_data
# regressive smoothing
summary(trend)$r.squared
# quadratic smoothing
mean_GDP = mean(task_data$GDP)
SST = sum((task_data$GDP - mean_GDP)^2)
residuals = residuals(quad_smth)
SSE = sum(residuals^2)
R_squared = 1 - (SSE / SST)
R_squared
library(ggplot2)
ggplot(aes(x = year), data = task_data)+
geom_line(aes(y = GDP, color = "original"))+
geom_line(aes(y = reg_smooth, color = "reg_smooth"))+
geom_line(aes(y = quad_smth, color = "quad_smth"))+
labs(
title = "GDP to Year Data",
x = "year",
y = "GDP"
)+
scale_color_manual(name = "Legend", values = c("original" = "black", "reg_smooth"= "red", "quad_smth"= "blue"))+
theme_minimal()
task_data$forecst_err_linear = task_data$GDP - task_data$reg_smooth
task_data$forecst_err_quad = task_data$GDP - task_data$quad_smth
task_data
cat("The forecast errors are:\n\nYear:", seq(2011, 2019),"\n\nLinear smoothing Err :", task_data$forecst_err_linear, "\n\nQuadratic smoothing Err :", task_data$forecst_err_quad)
new_data = data.frame(zero_yr = 2022 - med_yr)
predicted_gdp = predict(trend, newdata = new_data)
cat("The GDP for 2022 is predicted to be: ", predicted_gdp, "\n")
loes_val = data.frame(year = seq(2011, 2022),
GDP =predict(quad_smth, newdata = data.frame(zero_yr = seq(2011, 2022) - median(seq(2011, 2022)))))
loes_val
zero_yr_range  =  seq(min(task_data$zero_yr), max(task_data$zero_yr), length.out = 100)
predicted_values  =  predict(quad_smth, newdata = data.frame(zero_yr = zero_yr_range))
loes_df = data.frame(zero_yr = zero_yr_range, pred = predicted_values)
poly_fit  =  lm(predicted_values ~ zero_yr_range)
coefficients(poly_fit)
Coeffs = coefficients(poly_fit)
loes_n = nrow(task_data)
loes_yt = sum(task_data$GDP)
loes_xt = sum(task_data$zero_yr)
loes_xt_2 = sum(task_data$zero_yr ^ 2)
loes_beta_2 = (loes_yt - (loes_n * Coeffs[1]) - (Coeffs[2] * loes_xt))/ loes_xt_2
cat("The GDP for 2022 is predicted to be: ", Coeffs[1] + (2022 - med_yr) * Coeffs[2] + (2022 - med_yr)^2 * loes_beta_2, "\n")
task_data$loes_pred =  Coeffs[1] + (task_data$year - med_yr) * Coeffs[2] + (task_data$year - med_yr)^2 * loes_beta_2
task_data
new_data = data.frame(x = task_data$zero_yr,
y = task_data$GDP)
new_data$x_sqrd = new_data$x^2
new_data$x_y = new_data$x * new_data$y
new_data$x_cubed = new_data$x^3
new_data$x_quad = new_data$x^4
new_data$x_2_y = new_data$x_sqrd * new_data$y
new_data
b = c(sum(new_data$y), sum(new_data$x_y), sum(new_data$x_2_y))
val_1 = sum(new_data$x)
val_2 = sum(new_data$x_sqrd)
val_3 = sum(new_data$x_cubed)
val_4 =  sum(new_data$x_quad)
a = matrix(c(10, val_1, val_2,
val_1, val_2, val_3,
val_2, val_3, val_4), byrow = TRUE, nrow = 3)
a
coef_x = solve(a, b)
coef_x
cat("The corrected GDP using math formula is:\n\t ", coef_x[1] + (2022 - med_yr) * coef_x[2] + (2022 - med_yr)^2 * coef_x[3])
task_data$math_quad = coef_x[1] + task_data$zero_yr * coef_x[2] + task_data$zero_yr^2 * coef_x[3]
task_data
library(ggplot2)
plot_smth = function(y_data, col){
plot_data = data.frame(x = task_data$year,
y = task_data[[y_data]])
plot = ggplot(aes(x = x), data = plot_data)+
geom_line(aes(y = y, color = col))+
labs(
title = "GDP to Year Data",
x = "year",
y = "GDP"
)+
theme_minimal()
return(plot)
}
ggplot(aes(x = year), data = task_data)+
geom_line(aes(y = GDP, color = "original"))+
geom_line(aes(y = reg_smooth, color = "reg_smooth"))+
geom_line(aes(y = quad_smth, color = "quadratic_smth"))+
geom_line(aes(y = loes_pred, color = "loess_calc_pred"))+
geom_line(aes(y = math_quad, color = "math_calc_pred"))+
labs(
title = "GDP to Year Data",
x = "year",
y = "GDP"
)+
scale_color_manual(name = "Legend", values = c("original" = "black", "reg_smooth"= "red", "quadratic_smth"= "blue", "loess_calc_pred" = "green", "math_calc_pred" = "orange"))+
theme_minimal()
plot_smth("reg_smooth", "red")
plot_smth("quad_smth", "blue")
plot_smth("math_quad", "orange")
plot_smth("loes_pred", "red")
exp_data = data.frame(year= seq(2014, 2021),
subscribers = c(2, 5, 11, 20, 35, 50, 70, 95))
exp_data
exp_Data = function(df,x, y){
# transform
log_data = log(df[[y]])
yr = df[[x]]
# fit
model = lm(log_data~yr, data = df )
print(paste("model summary:\n", summary(model)))
print(paste("\n\n\nThe R-squared value is:\n\n", summary(model)$r.squared))
# intercepts
alpha = exp(coef(model)[1])
beta = coef(model)[2]
cat("\n\n\nThe alpha value is and the beta value is:\n\t", alpha, "\t", beta,"\n")
val = df[[x]]
predicted = alpha * exp(beta * val)
return(predicted)
}
exp_data$t = exp_data$year - median(exp_data$year)
exp_data$exp_trend = exp_Data(exp_data, "t", "subscribers")
exp_data
exp_data$forecst_err = exp_data$subscribers - exp_data$exp_trend
exp_data
pred_subs = function(alpha, beta, target){
return(alpha * exp(beta * target))
}
med = median(exp_data$year)
target = 2024 - med
cat("The predicted subsribers are:\n\t",round(pred_subs(20.00024, 0.5395523, target)), "\n")
ggplot(aes(x = year), data = exp_data)+
geom_point(aes(y = subscribers, color = "original"))+
geom_line(aes(y = exp_trend, color = "exponential_smth"))+
labs(
title = "Exponential Smoothing of Subscriber Data",
x = "Years",
y = "subsribers"
)+
scale_color_manual(name = "Legend",
values = c("original" = "maroon",
"exponential_smth" = "purple"))+
theme_light()
pred_exp = rbind(data.frame(
year = c(2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021),
subscribers = exp_data$exp_trend,
t = c(-3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5)
),
data.frame(year = 2024, subscribers = 667, t = 6.5))
ggplot(pred_exp, aes(x = year, y = subscribers)) +
geom_point(aes(color = year == 2024), size = 4) +
geom_line(data = pred_exp[pred_exp$year <= 2021, ], aes(group = 1)) +
geom_line() +
scale_color_manual(values = c("black", "red")) +
labs(title = "Subscribers Over the Years with 2024 Prediction",
x = "Year",
y = "Subscribers") +
theme_minimal()
task_data$exp_smth = exp_Data(task_data, "zero_yr", "GDP")
knitr::opts_chunk$set(echo = TRUE)
task_data = data.frame(year = seq(2011, 2020),
GDP = c(35, 37, 51, 54, 62, 64, 74, 71, 83, 80))
task_data
med_yr = median(task_data$year)
task_data$zero_yr = task_data$year - med_yr
task_data
trend = lm(GDP~zero_yr, data = task_data)
trend$coefficients
# create the reg_smooth data
Beta_0 = trend$coefficients[1]
Beta_1 = trend$coefficients[2]
task_data$reg_smooth = Beta_1 * task_data$zero_yr + Beta_0
task_data
quad_smth = loess(GDP~zero_yr, task_data)
task_data$quad_smth = predict(quad_smth, task_data)
task_data
# regressive smoothing
summary(trend)$r.squared
# quadratic smoothing
mean_GDP = mean(task_data$GDP)
SST = sum((task_data$GDP - mean_GDP)^2)
residuals = residuals(quad_smth)
SSE = sum(residuals^2)
R_squared = 1 - (SSE / SST)
R_squared
library(ggplot2)
ggplot(aes(x = year), data = task_data)+
geom_line(aes(y = GDP, color = "original"))+
geom_line(aes(y = reg_smooth, color = "reg_smooth"))+
geom_line(aes(y = quad_smth, color = "quad_smth"))+
labs(
title = "GDP to Year Data",
x = "year",
y = "GDP"
)+
scale_color_manual(name = "Legend", values = c("original" = "black", "reg_smooth"= "red", "quad_smth"= "blue"))+
theme_minimal()
task_data$forecst_err_linear = task_data$GDP - task_data$reg_smooth
task_data$forecst_err_quad = task_data$GDP - task_data$quad_smth
task_data
cat("The forecast errors are:\n\nYear:", seq(2011, 2019),"\n\nLinear smoothing Err :", task_data$forecst_err_linear, "\n\nQuadratic smoothing Err :", task_data$forecst_err_quad)
new_data = data.frame(zero_yr = 2022 - med_yr)
predicted_gdp = predict(trend, newdata = new_data)
cat("The GDP for 2022 is predicted to be: ", predicted_gdp, "\n")
loes_val = data.frame(year = seq(2011, 2022),
GDP =predict(quad_smth, newdata = data.frame(zero_yr = seq(2011, 2022) - median(seq(2011, 2022)))))
loes_val
zero_yr_range  =  seq(min(task_data$zero_yr), max(task_data$zero_yr), length.out = 100)
predicted_values  =  predict(quad_smth, newdata = data.frame(zero_yr = zero_yr_range))
loes_df = data.frame(zero_yr = zero_yr_range, pred = predicted_values)
poly_fit  =  lm(predicted_values ~ zero_yr_range)
coefficients(poly_fit)
Coeffs = coefficients(poly_fit)
loes_n = nrow(task_data)
loes_yt = sum(task_data$GDP)
loes_xt = sum(task_data$zero_yr)
loes_xt_2 = sum(task_data$zero_yr ^ 2)
loes_beta_2 = (loes_yt - (loes_n * Coeffs[1]) - (Coeffs[2] * loes_xt))/ loes_xt_2
cat("The GDP for 2022 is predicted to be: ", Coeffs[1] + (2022 - med_yr) * Coeffs[2] + (2022 - med_yr)^2 * loes_beta_2, "\n")
task_data$loes_pred =  Coeffs[1] + (task_data$year - med_yr) * Coeffs[2] + (task_data$year - med_yr)^2 * loes_beta_2
task_data
new_data = data.frame(x = task_data$zero_yr,
y = task_data$GDP)
new_data$x_sqrd = new_data$x^2
new_data$x_y = new_data$x * new_data$y
new_data$x_cubed = new_data$x^3
new_data$x_quad = new_data$x^4
new_data$x_2_y = new_data$x_sqrd * new_data$y
new_data
b = c(sum(new_data$y), sum(new_data$x_y), sum(new_data$x_2_y))
val_1 = sum(new_data$x)
val_2 = sum(new_data$x_sqrd)
val_3 = sum(new_data$x_cubed)
val_4 =  sum(new_data$x_quad)
a = matrix(c(10, val_1, val_2,
val_1, val_2, val_3,
val_2, val_3, val_4), byrow = TRUE, nrow = 3)
a
coef_x = solve(a, b)
coef_x
cat("The corrected GDP using math formula is:\n\t ", coef_x[1] + (2022 - med_yr) * coef_x[2] + (2022 - med_yr)^2 * coef_x[3])
task_data$math_quad = coef_x[1] + task_data$zero_yr * coef_x[2] + task_data$zero_yr^2 * coef_x[3]
task_data
library(ggplot2)
plot_smth = function(y_data, col){
plot_data = data.frame(x = task_data$year,
y = task_data[[y_data]])
plot = ggplot(aes(x = x), data = plot_data)+
geom_line(aes(y = y, color = col))+
labs(
title = "GDP to Year Data",
x = "year",
y = "GDP"
)+
theme_minimal()
return(plot)
}
ggplot(aes(x = year), data = task_data)+
geom_line(aes(y = GDP, color = "original"))+
geom_line(aes(y = reg_smooth, color = "reg_smooth"))+
geom_line(aes(y = quad_smth, color = "quadratic_smth"))+
geom_line(aes(y = loes_pred, color = "loess_calc_pred"))+
geom_line(aes(y = math_quad, color = "math_calc_pred"))+
labs(
title = "GDP to Year Data",
x = "year",
y = "GDP"
)+
scale_color_manual(name = "Legend", values = c("original" = "black", "reg_smooth"= "red", "quadratic_smth"= "blue", "loess_calc_pred" = "green", "math_calc_pred" = "orange"))+
theme_minimal()
plot_smth("reg_smooth", "red")
plot_smth("quad_smth", "blue")
plot_smth("math_quad", "orange")
plot_smth("loes_pred", "red")
exp_data = data.frame(year= seq(2014, 2021),
subscribers = c(2, 5, 11, 20, 35, 50, 70, 95))
exp_data
exp_Data = function(df,x, y){
# transform
log_data = log(df[[y]])
yr = df[[x]]
# fit
model = lm(log_data~yr, data = df )
cat("model summary:\n", summary(model))
cat("\n\n\nThe R-squared value is:\n", summary(model)$r.squared)
# intercepts
alpha = exp(coef(model)[1])
beta = coef(model)[2]
cat("\n\n\nThe alpha value is and the beta value is:\n\t", alpha, "\t", beta,"\n")
val = df[[x]]
predicted = alpha * exp(beta * val)
return(predicted)
}
exp_data$t = exp_data$year - median(exp_data$year)
exp_data$exp_trend = exp_Data(exp_data, "t", "subscribers")
knitr::opts_chunk$set(echo = TRUE)
task_data = data.frame(year = seq(2011, 2020),
GDP = c(35, 37, 51, 54, 62, 64, 74, 71, 83, 80))
task_data
med_yr = median(task_data$year)
task_data$zero_yr = task_data$year - med_yr
task_data
trend = lm(GDP~zero_yr, data = task_data)
trend$coefficients
# create the reg_smooth data
Beta_0 = trend$coefficients[1]
Beta_1 = trend$coefficients[2]
task_data$reg_smooth = Beta_1 * task_data$zero_yr + Beta_0
task_data
quad_smth = loess(GDP~zero_yr, task_data)
task_data$quad_smth = predict(quad_smth, task_data)
task_data
# regressive smoothing
summary(trend)$r.squared
# quadratic smoothing
mean_GDP = mean(task_data$GDP)
SST = sum((task_data$GDP - mean_GDP)^2)
residuals = residuals(quad_smth)
SSE = sum(residuals^2)
R_squared = 1 - (SSE / SST)
R_squared
library(ggplot2)
ggplot(aes(x = year), data = task_data)+
geom_line(aes(y = GDP, color = "original"))+
geom_line(aes(y = reg_smooth, color = "reg_smooth"))+
geom_line(aes(y = quad_smth, color = "quad_smth"))+
labs(
title = "GDP to Year Data",
x = "year",
y = "GDP"
)+
scale_color_manual(name = "Legend", values = c("original" = "black", "reg_smooth"= "red", "quad_smth"= "blue"))+
theme_minimal()
task_data$forecst_err_linear = task_data$GDP - task_data$reg_smooth
task_data$forecst_err_quad = task_data$GDP - task_data$quad_smth
task_data
cat("The forecast errors are:\n\nYear:", seq(2011, 2019),"\n\nLinear smoothing Err :", task_data$forecst_err_linear, "\n\nQuadratic smoothing Err :", task_data$forecst_err_quad)
new_data = data.frame(zero_yr = 2022 - med_yr)
predicted_gdp = predict(trend, newdata = new_data)
cat("The GDP for 2022 is predicted to be: ", predicted_gdp, "\n")
loes_val = data.frame(year = seq(2011, 2022),
GDP =predict(quad_smth, newdata = data.frame(zero_yr = seq(2011, 2022) - median(seq(2011, 2022)))))
loes_val
zero_yr_range  =  seq(min(task_data$zero_yr), max(task_data$zero_yr), length.out = 100)
predicted_values  =  predict(quad_smth, newdata = data.frame(zero_yr = zero_yr_range))
loes_df = data.frame(zero_yr = zero_yr_range, pred = predicted_values)
poly_fit  =  lm(predicted_values ~ zero_yr_range)
coefficients(poly_fit)
Coeffs = coefficients(poly_fit)
loes_n = nrow(task_data)
loes_yt = sum(task_data$GDP)
loes_xt = sum(task_data$zero_yr)
loes_xt_2 = sum(task_data$zero_yr ^ 2)
loes_beta_2 = (loes_yt - (loes_n * Coeffs[1]) - (Coeffs[2] * loes_xt))/ loes_xt_2
cat("The GDP for 2022 is predicted to be: ", Coeffs[1] + (2022 - med_yr) * Coeffs[2] + (2022 - med_yr)^2 * loes_beta_2, "\n")
task_data$loes_pred =  Coeffs[1] + (task_data$year - med_yr) * Coeffs[2] + (task_data$year - med_yr)^2 * loes_beta_2
task_data
new_data = data.frame(x = task_data$zero_yr,
y = task_data$GDP)
new_data$x_sqrd = new_data$x^2
new_data$x_y = new_data$x * new_data$y
new_data$x_cubed = new_data$x^3
new_data$x_quad = new_data$x^4
new_data$x_2_y = new_data$x_sqrd * new_data$y
new_data
b = c(sum(new_data$y), sum(new_data$x_y), sum(new_data$x_2_y))
val_1 = sum(new_data$x)
val_2 = sum(new_data$x_sqrd)
val_3 = sum(new_data$x_cubed)
val_4 =  sum(new_data$x_quad)
a = matrix(c(10, val_1, val_2,
val_1, val_2, val_3,
val_2, val_3, val_4), byrow = TRUE, nrow = 3)
a
coef_x = solve(a, b)
coef_x
cat("The corrected GDP using math formula is:\n\t ", coef_x[1] + (2022 - med_yr) * coef_x[2] + (2022 - med_yr)^2 * coef_x[3])
task_data$math_quad = coef_x[1] + task_data$zero_yr * coef_x[2] + task_data$zero_yr^2 * coef_x[3]
task_data
library(ggplot2)
plot_smth = function(y_data, col){
plot_data = data.frame(x = task_data$year,
y = task_data[[y_data]])
plot = ggplot(aes(x = x), data = plot_data)+
geom_line(aes(y = y, color = col))+
labs(
title = "GDP to Year Data",
x = "year",
y = "GDP"
)+
theme_minimal()
return(plot)
}
ggplot(aes(x = year), data = task_data)+
geom_line(aes(y = GDP, color = "original"))+
geom_line(aes(y = reg_smooth, color = "reg_smooth"))+
geom_line(aes(y = quad_smth, color = "quadratic_smth"))+
geom_line(aes(y = loes_pred, color = "loess_calc_pred"))+
geom_line(aes(y = math_quad, color = "math_calc_pred"))+
labs(
title = "GDP to Year Data",
x = "year",
y = "GDP"
)+
scale_color_manual(name = "Legend", values = c("original" = "black", "reg_smooth"= "red", "quadratic_smth"= "blue", "loess_calc_pred" = "green", "math_calc_pred" = "orange"))+
theme_minimal()
plot_smth("reg_smooth", "red")
plot_smth("quad_smth", "blue")
plot_smth("math_quad", "orange")
plot_smth("loes_pred", "red")
exp_data = data.frame(year= seq(2014, 2021),
subscribers = c(2, 5, 11, 20, 35, 50, 70, 95))
exp_data
exp_Data = function(df,x, y){
# transform
log_data = log(df[[y]])
yr = df[[x]]
# fit
model = lm(log_data~yr, data = df )
print("model summary:")
print(summary(model))
cat("\n\n\nThe R-squared value is:\n", summary(model)$r.squared)
# intercepts
alpha = exp(coef(model)[1])
beta = coef(model)[2]
cat("\n\n\nThe alpha value is and the beta value is:\n\t", alpha, "\t", beta,"\n")
val = df[[x]]
predicted = alpha * exp(beta * val)
return(predicted)
}
exp_data$t = exp_data$year - median(exp_data$year)
exp_data$exp_trend = exp_Data(exp_data, "t", "subscribers")
exp_data
exp_data$forecst_err = exp_data$subscribers - exp_data$exp_trend
exp_data
pred_subs = function(alpha, beta, target){
return(alpha * exp(beta * target))
}
med = median(exp_data$year)
target = 2024 - med
cat("The predicted subsribers are:\n\t",round(pred_subs(20.00024, 0.5395523, target)), "\n")
ggplot(aes(x = year), data = exp_data)+
geom_point(aes(y = subscribers, color = "original"))+
geom_line(aes(y = exp_trend, color = "exponential_smth"))+
labs(
title = "Exponential Smoothing of Subscriber Data",
x = "Years",
y = "subsribers"
)+
scale_color_manual(name = "Legend",
values = c("original" = "maroon",
"exponential_smth" = "purple"))+
theme_light()
pred_exp = rbind(data.frame(
year = c(2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021),
subscribers = exp_data$exp_trend,
t = c(-3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5)
),
data.frame(year = 2024, subscribers = 667, t = 6.5))
ggplot(pred_exp, aes(x = year, y = subscribers)) +
geom_point(aes(color = year == 2024), size = 4) +
geom_line(data = pred_exp[pred_exp$year <= 2021, ], aes(group = 1)) +
geom_line() +
scale_color_manual(values = c("black", "red")) +
labs(title = "Subscribers Over the Years with 2024 Prediction",
x = "Year",
y = "Subscribers") +
theme_minimal()
task_data$exp_smth = exp_Data(task_data, "zero_yr", "GDP")
