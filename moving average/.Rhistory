x = seq(1, 9)
plot_data = data.frame(x,
moving_avg = na.omit(data$moving_avg),
wgt_mvn_avg = na.omit(data$wgt_avg))
plot_data
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(plot_data, aes(x=x))+
geom_line(y=moving_avg, color = "moving_avg")+
geom_line(y=moving_avg, color = "wgt_mvn_avg")
library(ggplot2)
ggplot(plot_data, aes(x=x))+
geom_line(y=moving_avg, color = "moving_avg")+
geom_line(y=wgt_mvn_avg, color = "wgt_mvn_avg")
colnames(plot_data)
library(ggplot2)
ggplot(plot_data, aes(x=x))+
geom_line(y=moving_avg, color = "moving_avg")+
geom_line(y=wgt_mvn_avg, color = "wgt_mvn_avg")
library(ggplot2)
ggplot(plot_data, aes(x=x))+
geom_line(y=moving_avg, color = "blue")+
geom_line(y=wgt_mvn_avg, color = "red")
library(ggplot2)
ggplot(plot_data, aes(x=x))+
geom_line(aes(y = moving_avg), color = "blue")+
geom_line(aes(y = wgt_mvn_avg), color = "red")
labs(title = "Line Graphs of Moving Averages",
x = "X",
y = "Values") +
scale_color_manual(name = "Legend", values = c("moving_avg" = "blue", "wgt_mvn_avg" = "red")) +
theme_minimal()
season = rep(c("summer", "monsoon", "winter", "spring"), 3)
data = data.frame(season = season,
year = c(rep(2020, 4),
rep(2021, 4),
rep(2022, 4)),
levels = c(70, 52, 22, 31, 101, 64, 24, 45, 146, 92, 38, 49))
data
library(zoo)
data$moving_avg =  rollapply(data$levels, width = 4, FUN = mean, align = 'right', fill = NA)
data
wgt = c(1, 2, 3, 4)
weighted_avg = function(x){
sum(x * wgt)/ sum(wgt)
}
data$wgt_avg = rollapply(data$levels, width = 4, FUN = weighted_avg, align = 'right', fill = NA)
data
x = seq(1, 9)
plot_data = data.frame(x,
moving_avg = na.omit(data$moving_avg),
wgt_mvn_avg = na.omit(data$wgt_avg))
plot_data
library(ggplot2)
ggplot(plot_data, aes(x=x))+
geom_line(aes(y = moving_avg), color = "blue")+
geom_line(aes(y = wgt_mvn_avg), color = "red")
labs(title = "Line Graphs of Moving Averages",
x = "X",
y = "Values") +
scale_color_manual(name = "Legend", values = c("moving_avg" = "blue", "wgt_mvn_avg" = "red")) +
theme_minimal()
setwd("C:/Users/ADMIN/Documents/SEM 2 2024/time series/moving average")
season = rep(c("summer", "monsoon", "winter", "spring"), 3)
data = data.frame(season = season,
year = c(rep(2020, 4),
rep(2021, 4),
rep(2022, 4)),
levels = c(70, 52, 22, 31, 101, 64, 24, 45, 146, 92, 38, 49))
data
library(zoo)
data$moving_avg =  rollapply(data$levels, width = 4, FUN = mean, align = 'right', fill = NA)
data
wgt = c(1, 2, 3, 4)
weighted_avg = function(x){
sum(x * wgt)/ sum(wgt)
}
data$wgt_avg = rollapply(data$levels, width = 4, FUN = weighted_avg, align = 'right', fill = NA)
data
x = seq(1, 9)
plot_data = data.frame(x,
moving_avg = na.omit(data$moving_avg),
wgt_mvn_avg = na.omit(data$wgt_avg))
plot_data
library(ggplot2)
ggplot(plot_data, aes(x=x))+
geom_line(aes(y = moving_avg), color = "blue")+
geom_line(aes(y = wgt_mvn_avg), color = "red")
labs(title = "Line Graphs of Moving Averages",
x = "X",
y = "Values") +
scale_color_manual(name = "Legend", values = c("moving_avg" = "blue", "wgt_mvn_avg" = "red")) +
theme_minimal()
ggplot(aes(x = x), data = data)+
geom_line(aes(y = moving_avg), color = "blue")+
geom_line(aes(y = wgt_mvn_avg), color = "red")+
geom_line(aes(y = levels), color = "green")+
labs(title = "Line Graphs of Moving Averages",
x = "X",
y = "Values") +
scale_color_manual(name = "Legend", values = c("moving_avg" = "blue", "wgt_mvn_avg" = "red","original data" = "green")) +
theme_minimal()
View(data)
data
ggplot(aes(x = x), data = data)+
geom_line(aes(y = moving_avg), color = "blue")+
geom_line(aes(y = wgt_avg), color = "red")+
geom_line(aes(y = levels), color = "green")+
labs(title = "Line Graphs of Moving Averages",
x = "X",
y = "Values") +
scale_color_manual(name = "Legend", values = c("moving_avg" = "blue", "wgt_mvn_avg" = "red","original data" = "green")) +
theme_minimal()
ggplot(aes(x = x), data = data)+
# geom_line(aes(y = moving_avg), color = "blue")+
# geom_line(aes(y = wgt_avg), color = "red")+
geom_line(aes(y = levels), color = "green")+
labs(title = "Line Graphs of Moving Averages",
x = "X",
y = "Values") +
scale_color_manual(name = "Legend", values = c("moving_avg" = "blue", "wgt_mvn_avg" = "red","original data" = "green")) +
theme_minimal()
ggplot(data, aes(x = x))+
# geom_line(aes(y = moving_avg), color = "blue")+
# geom_line(aes(y = wgt_avg), color = "red")+
geom_line(aes(y = levels), color = "green")+
labs(title = "Line Graphs of Moving Averages",
x = "X",
y = "Values") +
scale_color_manual(name = "Legend", values = c("moving_avg" = "blue", "wgt_mvn_avg" = "red","original data" = "green")) +
theme_minimal()
ggplot(data, aes(x = seq(1,12)))+
geom_line(aes(y = moving_avg), color = "blue")+
geom_line(aes(y = wgt_avg), color = "red")+
geom_line(aes(y = levels), color = "green")+
labs(title = "Line Graphs of Moving Averages",
x = "X",
y = "Values") +
scale_color_manual(name = "Legend", values = c("moving_avg" = "blue", "wgt_mvn_avg" = "red","original data" = "green")) +
theme_minimal()
exp_data = data.frame(year = c(rep(2018, 3),
rep(2019, 3),
rep(2020, 3),
rep(2021, 3)),
period = rep(c("I", "II", "III"), 4),
no_claims = c(17, 13, 15, 19, 17, 19, 22, 14, 20, 23, 19, 20))
exp_data
a = [1]
a = c(1)
a[2] = 3
a
a[-1]
len(a)
size(a)
a.len
nrow(a)
length(a)
for(i in seq(1, nrow(exp_data))){print(i)}
for(i in seq(1,12)){print(i)}
exp_smooth = function(alpha, x){
smooth = x[1]
for(i in seq(2,length(x))){
smooth[i] = (alpha * x[i]) + (1- alpha) * smooth[-1]
}
return(smooth)
}
exp_smooth(0.4, exp_data$no_claims)
exp_smooth = function(alpha, x){
smooth = c()
smooth[1] = x[1]
for(i in seq(2,length(x))){
smooth[i] = (alpha * x[i]) + (1- alpha) * smooth[-1]
}
return(smooth)
}
exp_smooth(0.4, exp_data$no_claims)
exp_smooth = function(alpha, x){
a[1] = x[1]
for(i in seq(2,length(x))){
a[i] = (alpha * x[i]) + (1- alpha) * a[-1]
print(a)
}
return(smooth)
}
exp_smooth(0.4, exp_data$no_claims)
exp_smooth = function(alpha, x){
a = c()
a[1] = x[1]
for(i in seq(2,length(x))){
val = (alpha * x[i]) + (1- alpha) * a[-1]
a[i] = val
print(a)
}
return(smooth)
}
exp_smooth(0.4, exp_data$no_claims)
exp_smooth = function(alpha, x){
a = c(x[1])
for(i in seq(2,length(x))){
val = (alpha * x[i]) + (1- alpha) * a[-1]
a[i] = c(a,val)
print(a)
}
return(smooth)
}
exp_smooth(0.4, exp_data$no_claims)
exp_smooth = function(alpha, x){
a = c(x[1])
for(i in seq(2,length(x))){
val = (alpha * x[i]) + (1- alpha) * a[-1]
a[i] = c(a,val)
print(val)
}
return(smooth)
}
exp_smooth(0.4, exp_data$no_claims)
for(i in c(1:12)){print(i)}
exp_smooth = function(alpha, x, size){
a = c(x[1])
for(i in c(2:length(x))){
val = (alpha * x[i]) + (1- alpha) * a[-1]
a[i] = c(a,val)
print(val)
}
return(smooth)
}
x_exp = exp_data$no_claims
exp_smooth(0.4, x_exp, )
as.array(x_exp[1])
a = as.array(x_exp[1])
exp_smooth = function(alpha, x, size){
a = as.array([1])
exp_smooth = function(alpha, x, size){
a = as.array(x[1])
for(i in c(2:length(x))){
val = (alpha * x[i]) + (1- alpha) * a[-1]
a = c(a,val)
print(val)
}
return(smooth)
}
x_exp = exp_data$no_claims
exp_smooth(0.4, x_exp, )
exp_smooth = function(alpha, x){
a = as.array(x[1])
for(i in c(2:length(x))){
val = (alpha * x[i]) + (1- alpha) * a[-1]
a = c(a,val)
print(val)
}
return(smooth)
}
x_exp = exp_data$no_claims
exp_smooth(0.4, x_exp)
a
exp_smooth = function(alpha, x){
a = c(x[1])
for(i in c(2:length(x))){
val = (alpha * x[i]) + (1- alpha) * a[-1]
a = c(a,val)
print(val)
}
return(smooth)
}
x_exp = exp_data$no_claims
exp_smooth(0.4, x_exp)
a
a = c(x_exp[1])
a
a = c(a, (0.4 * x_exp[2]) + (1- 0.4)* a[-1])
a
(0.4 * x_exp[2]) + (1- 0.4)* a[-1]
a[-1]
a
a[-1,]
a[,-1]
a[:-1]
a[-1:]
a[length(a)]
exp_smooth = function(alpha, x){
a = c(x[1])
b = length(a)
for(i in c(2:length(x))){
val = (alpha * x[i]) + (1- alpha) * a[b]
a = c(a,val)
print(val)
}
return(smooth)
}
x_exp = exp_data$no_claims
exp_smooth(0.4, x_exp)
x_exp = exp_data$no_claims
f = exp_smooth(0.4, x_exp)
f
exp_smooth = function(alpha, x){
a = c(x[1])
b = length(a)
for(i in c(2:length(x))){
val = (alpha * x[i]) + (1- alpha) * a[b]
a = c(a,val)
print(val)
}
return(a)
}
x_exp = exp_data$no_claims
f = exp_smooth(0.4, x_exp)
f
exp_smooth = function(alpha, x){
a = c(x[1])
print(a)
b = length(a)
for(i in c(2:length(x))){
val = (alpha * x[i]) + (1- alpha) * a[b]
a = c(a,val)
}
return(a)
}
x_exp = exp_data$no_claims
f = exp_smooth(0.4, x_exp)
exp_smooth = function(alpha, x){
a = c(x[1])
b = length(a)
for(i in c(2:length(x))){
val = (alpha * x[i]) + (1- alpha) * a[b]
a = c(a,val)
}
print(a)
return(a)
}
x_exp = exp_data$no_claims
f = exp_smooth(0.4, x_exp)
exp_smooth = function(alpha, x){
a = c(x[1])
b = length(a)
for(i in c(2:length(x))){
val = (alpha * x[i]) + (1- alpha) * a[b]
a = c(a,val)
print(a)
}
return(a)
}
x_exp = exp_data$no_claims
f = exp_smooth(0.4, x_exp)
exp_smooth = function(alpha, x){
a = c(x[1])
b = length(a)
for(i in c(2:length(x))){
val = (alpha * x[i]) + (1- alpha) * a[i -1]
a = c(a,val)
print(a)
}
return(a)
}
x_exp = exp_data$no_claims
f = exp_smooth(0.4, x_exp)
f
exp_smooth = function(alpha, x){
a = c(x[1])
b = length(a)
for(i in c(2:length(x) -2)){
val = (alpha * x[i]) + (1- alpha) * a[i -1]
a = c(a,val)
print(a)
}
return(a)
}
x_exp = exp_data$no_claims
f = exp_smooth(0.4, x_exp)
exp_smooth = function(alpha, x){
a = c(x[1])
b = length(a)
for(i in c(2:length(x) -2)){
val = (alpha * x[i]) + (1- alpha) * a[i -1]
a = c(a,val)
}
return(a)
}
x_exp = exp_data$no_claims
f = exp_smooth(0.4, x_exp)
x_exp = exp_data$no_claims
exp_data$alpha_0.2 = exp_smooth(0.2, x_exp)
exp_smooth = function(alpha, x){
a = c(x[1])
b = length(a)
for(i in c(2:length(x))){
val = (alpha * x[i]) + (1- alpha) * a[i -1]
a = c(a,val)
}
return(a)
}
x_exp = exp_data$no_claims
exp_data$alpha_0.2 = exp_smooth(0.2, x_exp)
exp_data$alpha_0.4 = exp_smooth(0.4, x_exp)
exp_data$alpha_0.6 = exp_smooth(0.6, x_exp)
exp_data$alpha_0.8 = exp_smooth(0.8, x_exp)
exp_data
ggplot(exp_data, aes(x = seq(1, 12)))+
geom_line(aes(y = no_claims), color = "blue")+
geom_line(aes(y = alpha_0.2), color = "red")+
geom_line(aes(y = alpha_0.4), color = "green")+
geom_line(aes(y = alpha_0.6), color = "purple")+
geom_line(aes(y = alpha_0.8), color = "orange")+
labs(title = "Line Graphs of Moving Averages",
x = "X",
y = "Values") +
scale_color_manual(name = "Legend", values = c("original" = "blue", "alpha 0.2" = "red","alpha 0.4" = "green", "alpha 0.6" = "purple", "alpha 0.8" = "orange")) +
theme_minimal()
exp_smooth = function(alpha, x){
a = c(x[1])
b = length(a)
for(i in c(2:length(x))){
val = (alpha * x[i]) + (1- alpha) * a[i -1]
a = c(a,val)
}
return(a)
}
setwd("C:/Users/ADMIN/Documents/SEM 2 2024/STA3050 time series/moving average")
reg_data = c(year = seq(2010, 2018),
sales = c(52, 54, 48, 60, 61, 66, 70, 80, 92))
median(reg_data$year)
reg_data = data.frame(year = seq(2010, 2018),
sales = c(52, 54, 48, 60, 61, 66, 70, 80, 92))
median(reg_data$year)
reg_data$x_t = data$year - median(data$year)
med_yr = median(reg_data$year)
reg_data$x_t = reg_data$year - med_yr
reg_data
reg_data$x_y = reg_data$x_t * reg_data$x_t
reg_data$x_t_sqrd = reg_data$x_t ^ 2
reg_data
summary(lm(sales~x_t, data = reg_data))
summary(lm(sales~x_t, data = reg_data))$estimates
summary(lm(sales~x_t, data = reg_data))
summary(lm(sales~x_t, data = reg_data))$Estimates
summary(lm(sales~x_t, data = reg_data))$Intercept
lm(sales~x_t, data = reg_data)$coefficients
reg_data$smooth = 4.80000 reg_data$year + 64.77778
reg_data$smooth = 4.80000 * reg_data$year + 64.77778
reg_data
reg_data$smooth = 4.80000 * reg_data$sales + 64.77778
reg_data
reg_data$smooth = 4.80000 * reg_data$x_t + 64.77778
reg_data
library(ggplot2)
ggplot(aes(x = year), data = reg_data)+
geom_line(aes(y = sales), color = "original")+
geom_line(aes(y = smooth), color = "smoothed")+
labs(
title = "regressive smoothing of sales for each year",
x = "year",
y = "sales"
)+
scale_color_manual(name = "Legend", values = c("original" = "blue", "smoothed" = "red"))+
theme_minimal()
library(ggplot2)
ggplot(aes(x = year), data = reg_data)+
geom_line(aes(y = sales), color = original)+
geom_line(aes(y = smooth), color = smoothed)+
labs(
title = "regressive smoothing of sales for each year",
x = "year",
y = "sales"
)+
scale_color_manual(name = "Legend", values = c("original" = "blue", "smoothed" = "red"))+
theme_minimal()
library(ggplot2)
ggplot(aes(x = year), data = reg_data)+
geom_line(aes(y = sales, color = "original"))+
geom_line(aes(y = smooth, color = "smoothed"))+
labs(
title = "regressive smoothing of sales for each year",
x = "year",
y = "sales"
)+
scale_color_manual(name = "Legend", values = c("original" = "blue", "smoothed" = "red"))+
theme_minimal()
reg_data$quad_smooth = predict(loess(sales~x_t, reg_data), reg_data)
reg_data
ggplot(aes(x = year), data = reg_data)+
geom_line(aes(y = sales, color = "original"))+
geom_line(aes(y = smooth, color = "smoothed"))+
geom_line(aes(y = quad_smooth, color = "qsmoothed"))
labs(
title = "regressive smoothing of sales for each year",
x = "year",
y = "sales"
)+
scale_color_manual(name = "Legend", values = c("original" = "blue", "smoothed" = "red"), "qsmoothed" = "green")+
theme_minimal()
ggplot(aes(x = year), data = reg_data)+
geom_line(aes(y = sales, color = "original"))+
geom_line(aes(y = smooth, color = "smoothed"))+
geom_line(aes(y = quad_smooth, color = "qsmoothed"))+
labs(
title = "regressive smoothing of sales for each year",
x = "year",
y = "sales"
)+
scale_color_manual(name = "Legend", values = c("original" = "blue", "smoothed" = "red"), "qsmoothed" = "green")+
theme_minimal()
ggplot(aes(x = year), data = reg_data)+
geom_line(aes(y = sales, color = "original"))+
geom_line(aes(y = smooth, color = "smoothed"))+
geom_line(aes(y = quad_smooth, color = "qsmoothed"))+
labs(
title = "regressive smoothing of sales for each year",
x = "year",
y = "sales"
)+
scale_color_manual(name = "Legend", values = c("original" = "blue", "smoothed" = "red", "qsmoothed" = "green"))+
theme_minimal()
